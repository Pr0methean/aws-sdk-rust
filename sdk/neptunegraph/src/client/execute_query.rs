// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ExecuteQuery`](crate::operation::execute_query::builders::ExecuteQueryFluentBuilder) operation.
                            ///
                            /// - The fluent builder is configurable:
    ///   - [`graph_identifier(impl Into<String>)`](crate::operation::execute_query::builders::ExecuteQueryFluentBuilder::graph_identifier) / [`set_graph_identifier(Option<String>)`](crate::operation::execute_query::builders::ExecuteQueryFluentBuilder::set_graph_identifier):<br>required: **true**<br><p>The unique identifier of the Neptune Analytics graph.</p><br>
    ///   - [`query_string(impl Into<String>)`](crate::operation::execute_query::builders::ExecuteQueryFluentBuilder::query_string) / [`set_query_string(Option<String>)`](crate::operation::execute_query::builders::ExecuteQueryFluentBuilder::set_query_string):<br>required: **true**<br><p>The query string to be executed.</p><br>
    ///   - [`language(QueryLanguage)`](crate::operation::execute_query::builders::ExecuteQueryFluentBuilder::language) / [`set_language(Option<QueryLanguage>)`](crate::operation::execute_query::builders::ExecuteQueryFluentBuilder::set_language):<br>required: **true**<br><p>The query language the query is written in. Currently only openCypher is supported.</p><br>
    ///   - [`parameters(impl Into<String>, Document)`](crate::operation::execute_query::builders::ExecuteQueryFluentBuilder::parameters) / [`set_parameters(Option<HashMap::<String, Document>>)`](crate::operation::execute_query::builders::ExecuteQueryFluentBuilder::set_parameters):<br>required: **false**<br><p>The data parameters the query can use in JSON format. For example: {"name": "john", "age": 20}. (optional)</p><br>
    ///   - [`plan_cache(PlanCacheType)`](crate::operation::execute_query::builders::ExecuteQueryFluentBuilder::plan_cache) / [`set_plan_cache(Option<PlanCacheType>)`](crate::operation::execute_query::builders::ExecuteQueryFluentBuilder::set_plan_cache):<br>required: **false**<br><p>Query plan cache is a feature that saves the query plan and reuses it on successive executions of the same query. This reduces query latency, and works for both <code>READ</code> and <code>UPDATE</code> queries. The plan cache is an LRU cache with a 5 minute TTL and a capacity of 1000.</p><br>
    ///   - [`explain_mode(ExplainMode)`](crate::operation::execute_query::builders::ExecuteQueryFluentBuilder::explain_mode) / [`set_explain_mode(Option<ExplainMode>)`](crate::operation::execute_query::builders::ExecuteQueryFluentBuilder::set_explain_mode):<br>required: **false**<br><p>The explain mode parameter returns a query explain instead of the actual query results. A query explain can be used to gather insights about the query execution such as planning decisions, time spent on each operator, solutions flowing etc.</p><br>
    ///   - [`query_timeout_milliseconds(i32)`](crate::operation::execute_query::builders::ExecuteQueryFluentBuilder::query_timeout_milliseconds) / [`set_query_timeout_milliseconds(Option<i32>)`](crate::operation::execute_query::builders::ExecuteQueryFluentBuilder::set_query_timeout_milliseconds):<br>required: **false**<br><p>Specifies the query timeout duration, in milliseconds. (optional)</p><br>
                            /// - On success, responds with [`ExecuteQueryOutput`](crate::operation::execute_query::ExecuteQueryOutput) with field(s):
    ///   - [`payload(ByteStream)`](crate::operation::execute_query::ExecuteQueryOutput::payload): <p>The query results.</p>
                            /// - On failure, responds with [`SdkError<ExecuteQueryError>`](crate::operation::execute_query::ExecuteQueryError)
    pub fn execute_query(&self) -> crate::operation::execute_query::builders::ExecuteQueryFluentBuilder {
                                crate::operation::execute_query::builders::ExecuteQueryFluentBuilder::new(self.handle.clone())
                            }
}

