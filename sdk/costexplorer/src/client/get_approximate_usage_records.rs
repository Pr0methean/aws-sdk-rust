// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetApproximateUsageRecords`](crate::operation::get_approximate_usage_records::builders::GetApproximateUsageRecordsFluentBuilder) operation.
                            ///
                            /// - The fluent builder is configurable:
    ///   - [`granularity(Granularity)`](crate::operation::get_approximate_usage_records::builders::GetApproximateUsageRecordsFluentBuilder::granularity) / [`set_granularity(Option<Granularity>)`](crate::operation::get_approximate_usage_records::builders::GetApproximateUsageRecordsFluentBuilder::set_granularity):<br>required: **true**<br><p>How granular you want the data to be. You can enable data at hourly or daily granularity.</p><br>
    ///   - [`services(impl Into<String>)`](crate::operation::get_approximate_usage_records::builders::GetApproximateUsageRecordsFluentBuilder::services) / [`set_services(Option<Vec::<String>>)`](crate::operation::get_approximate_usage_records::builders::GetApproximateUsageRecordsFluentBuilder::set_services):<br>required: **false**<br><p>The service metadata for the service or services you want to query. If not specified, all elements are returned.</p><br>
    ///   - [`approximation_dimension(ApproximationDimension)`](crate::operation::get_approximate_usage_records::builders::GetApproximateUsageRecordsFluentBuilder::approximation_dimension) / [`set_approximation_dimension(Option<ApproximationDimension>)`](crate::operation::get_approximate_usage_records::builders::GetApproximateUsageRecordsFluentBuilder::set_approximation_dimension):<br>required: **true**<br><p>The service to evaluate for the usage records. You can choose resource-level data at daily granularity, or hourly granularity with or without resource-level data.</p><br>
                            /// - On success, responds with [`GetApproximateUsageRecordsOutput`](crate::operation::get_approximate_usage_records::GetApproximateUsageRecordsOutput) with field(s):
    ///   - [`services(Option<HashMap::<String, i64>>)`](crate::operation::get_approximate_usage_records::GetApproximateUsageRecordsOutput::services): <p>The service metadata for the service or services in the response.</p>
    ///   - [`total_records(i64)`](crate::operation::get_approximate_usage_records::GetApproximateUsageRecordsOutput::total_records): <p>The total number of usage records for all services in the services list.</p>
    ///   - [`lookback_period(Option<DateInterval>)`](crate::operation::get_approximate_usage_records::GetApproximateUsageRecordsOutput::lookback_period): <p>The lookback period that's used for the estimation.</p>
                            /// - On failure, responds with [`SdkError<GetApproximateUsageRecordsError>`](crate::operation::get_approximate_usage_records::GetApproximateUsageRecordsError)
    pub fn get_approximate_usage_records(&self) -> crate::operation::get_approximate_usage_records::builders::GetApproximateUsageRecordsFluentBuilder {
                                crate::operation::get_approximate_usage_records::builders::GetApproximateUsageRecordsFluentBuilder::new(self.handle.clone())
                            }
}

