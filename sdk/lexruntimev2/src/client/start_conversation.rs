// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartConversation`](crate::operation::start_conversation::builders::StartConversationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`bot_id(impl Into<String>)`](crate::operation::start_conversation::builders::StartConversationFluentBuilder::bot_id) / [`set_bot_id(Option<String>)`](crate::operation::start_conversation::builders::StartConversationFluentBuilder::set_bot_id):<br>required: **true**<br><p>The identifier of the bot to process the request.</p><br>
    ///   - [`bot_alias_id(impl Into<String>)`](crate::operation::start_conversation::builders::StartConversationFluentBuilder::bot_alias_id) / [`set_bot_alias_id(Option<String>)`](crate::operation::start_conversation::builders::StartConversationFluentBuilder::set_bot_alias_id):<br>required: **true**<br><p>The alias identifier in use for the bot that processes the request.</p><br>
    ///   - [`locale_id(impl Into<String>)`](crate::operation::start_conversation::builders::StartConversationFluentBuilder::locale_id) / [`set_locale_id(Option<String>)`](crate::operation::start_conversation::builders::StartConversationFluentBuilder::set_locale_id):<br>required: **true**<br><p>The locale where the session is in use.</p><br>
    ///   - [`session_id(impl Into<String>)`](crate::operation::start_conversation::builders::StartConversationFluentBuilder::session_id) / [`set_session_id(Option<String>)`](crate::operation::start_conversation::builders::StartConversationFluentBuilder::set_session_id):<br>required: **true**<br><p>The identifier of the user session that is having the conversation.</p><br>
    ///   - [`conversation_mode(ConversationMode)`](crate::operation::start_conversation::builders::StartConversationFluentBuilder::conversation_mode) / [`set_conversation_mode(Option<ConversationMode>)`](crate::operation::start_conversation::builders::StartConversationFluentBuilder::set_conversation_mode):<br>required: **false**<br><p>The conversation type that you are using the Amazon Lex V2. If the conversation mode is <code>AUDIO</code> you can send both audio and DTMF information. If the mode is <code>TEXT</code> you can only send text.</p><br>
    ///   - [`request_event_stream(EventStreamSender<StartConversationRequestEventStream, StartConversationRequestEventStreamError>)`](crate::operation::start_conversation::builders::StartConversationFluentBuilder::request_event_stream) / [`set_request_event_stream(EventStreamSender<StartConversationRequestEventStream, StartConversationRequestEventStreamError>)`](crate::operation::start_conversation::builders::StartConversationFluentBuilder::set_request_event_stream):<br>required: **true**<br><p>Represents the stream of events to Amazon Lex V2 from your application. The events are encoded as HTTP/2 data frames.</p><br>
    /// - On success, responds with [`StartConversationOutput`](crate::operation::start_conversation::StartConversationOutput) with field(s):
    ///   - [`response_event_stream(EventReceiver<StartConversationResponseEventStream, StartConversationResponseEventStreamError>)`](crate::operation::start_conversation::StartConversationOutput::response_event_stream): <p>Represents the stream of events from Amazon Lex V2 to your application. The events are encoded as HTTP/2 data frames.</p>
    /// - On failure, responds with [`SdkError<StartConversationError>`](crate::operation::start_conversation::StartConversationError)
    pub fn start_conversation(&self) -> crate::operation::start_conversation::builders::StartConversationFluentBuilder {
        crate::operation::start_conversation::builders::StartConversationFluentBuilder::new(self.handle.clone())
    }
}
