// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configurations for how to carry out the search.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KnowledgeBaseVectorSearchConfiguration  {
    /// <p>The number of results to return.</p><note>
    /// <p>The <code>numberOfResults</code> field is currently unsupported for <code>RetrieveAndGenerate</code>. Don't include it in this field if you are sending a <code>RetrieveAndGenerate</code> request.</p>
    /// </note>
    pub number_of_results: i32,
    /// <p>By default, Amazon Bedrock decides a search strategy for you. If you're using an Amazon OpenSearch Serverless vector store that contains a filterable text field, you can specify whether to query the knowledge base with a <code>HYBRID</code> search using both vector embeddings and raw text, or <code>SEMANTIC</code> search using only vector embeddings. For other vector store configurations, only <code>SEMANTIC</code> search is available. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-test.html">Test a knowledge base</a>.</p>
    pub override_search_type: ::std::option::Option<crate::types::SearchType>,
}
impl  KnowledgeBaseVectorSearchConfiguration  {
    /// <p>The number of results to return.</p><note>
    /// <p>The <code>numberOfResults</code> field is currently unsupported for <code>RetrieveAndGenerate</code>. Don't include it in this field if you are sending a <code>RetrieveAndGenerate</code> request.</p>
    /// </note>
    pub fn number_of_results(&self) -> i32 {
        self.number_of_results
    }
    /// <p>By default, Amazon Bedrock decides a search strategy for you. If you're using an Amazon OpenSearch Serverless vector store that contains a filterable text field, you can specify whether to query the knowledge base with a <code>HYBRID</code> search using both vector embeddings and raw text, or <code>SEMANTIC</code> search using only vector embeddings. For other vector store configurations, only <code>SEMANTIC</code> search is available. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-test.html">Test a knowledge base</a>.</p>
    pub fn override_search_type(&self) -> ::std::option::Option<& crate::types::SearchType> {
        self.override_search_type.as_ref()
    }
}
impl KnowledgeBaseVectorSearchConfiguration {
    /// Creates a new builder-style object to manufacture [`KnowledgeBaseVectorSearchConfiguration`](crate::types::KnowledgeBaseVectorSearchConfiguration).
    pub fn builder() -> crate::types::builders::KnowledgeBaseVectorSearchConfigurationBuilder {
        crate::types::builders::KnowledgeBaseVectorSearchConfigurationBuilder::default()
    }
}

/// A builder for [`KnowledgeBaseVectorSearchConfiguration`](crate::types::KnowledgeBaseVectorSearchConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KnowledgeBaseVectorSearchConfigurationBuilder {
    pub(crate) number_of_results: ::std::option::Option<i32>,
    pub(crate) override_search_type: ::std::option::Option<crate::types::SearchType>,
}
impl KnowledgeBaseVectorSearchConfigurationBuilder {
    /// <p>The number of results to return.</p><note>
    /// <p>The <code>numberOfResults</code> field is currently unsupported for <code>RetrieveAndGenerate</code>. Don't include it in this field if you are sending a <code>RetrieveAndGenerate</code> request.</p>
    /// </note>
    pub fn number_of_results(mut self, input: i32) -> Self {
        self.number_of_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of results to return.</p><note>
    /// <p>The <code>numberOfResults</code> field is currently unsupported for <code>RetrieveAndGenerate</code>. Don't include it in this field if you are sending a <code>RetrieveAndGenerate</code> request.</p>
    /// </note>
    pub fn set_number_of_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_results = input; self
    }
    /// <p>The number of results to return.</p><note>
    /// <p>The <code>numberOfResults</code> field is currently unsupported for <code>RetrieveAndGenerate</code>. Don't include it in this field if you are sending a <code>RetrieveAndGenerate</code> request.</p>
    /// </note>
    pub fn get_number_of_results(&self) -> &::std::option::Option<i32> {
        &self.number_of_results
    }
    /// <p>By default, Amazon Bedrock decides a search strategy for you. If you're using an Amazon OpenSearch Serverless vector store that contains a filterable text field, you can specify whether to query the knowledge base with a <code>HYBRID</code> search using both vector embeddings and raw text, or <code>SEMANTIC</code> search using only vector embeddings. For other vector store configurations, only <code>SEMANTIC</code> search is available. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-test.html">Test a knowledge base</a>.</p>
    pub fn override_search_type(mut self, input: crate::types::SearchType) -> Self {
        self.override_search_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>By default, Amazon Bedrock decides a search strategy for you. If you're using an Amazon OpenSearch Serverless vector store that contains a filterable text field, you can specify whether to query the knowledge base with a <code>HYBRID</code> search using both vector embeddings and raw text, or <code>SEMANTIC</code> search using only vector embeddings. For other vector store configurations, only <code>SEMANTIC</code> search is available. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-test.html">Test a knowledge base</a>.</p>
    pub fn set_override_search_type(mut self, input: ::std::option::Option<crate::types::SearchType>) -> Self {
        self.override_search_type = input; self
    }
    /// <p>By default, Amazon Bedrock decides a search strategy for you. If you're using an Amazon OpenSearch Serverless vector store that contains a filterable text field, you can specify whether to query the knowledge base with a <code>HYBRID</code> search using both vector embeddings and raw text, or <code>SEMANTIC</code> search using only vector embeddings. For other vector store configurations, only <code>SEMANTIC</code> search is available. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-test.html">Test a knowledge base</a>.</p>
    pub fn get_override_search_type(&self) -> &::std::option::Option<crate::types::SearchType> {
        &self.override_search_type
    }
    /// Consumes the builder and constructs a [`KnowledgeBaseVectorSearchConfiguration`](crate::types::KnowledgeBaseVectorSearchConfiguration).
    pub fn build(self) -> crate::types::KnowledgeBaseVectorSearchConfiguration {
        crate::types::KnowledgeBaseVectorSearchConfiguration {
            number_of_results: self.number_of_results
                .unwrap_or(5)
            ,
            override_search_type: self.override_search_type
            ,
        }
    }
}

