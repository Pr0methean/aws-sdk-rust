// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The foundation model output from the post-processing step.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PostProcessingModelInvocationOutput {
    /// <p>The unique identifier of the trace.</p>
    pub trace_id: ::std::option::Option<::std::string::String>,
    /// <p>Details about the response from the Lambda parsing of the output of the post-processing step.</p>
    pub parsed_response: ::std::option::Option<crate::types::PostProcessingParsedResponse>,
}
impl PostProcessingModelInvocationOutput {
    /// <p>The unique identifier of the trace.</p>
    pub fn trace_id(&self) -> ::std::option::Option<&str> {
        self.trace_id.as_deref()
    }
    /// <p>Details about the response from the Lambda parsing of the output of the post-processing step.</p>
    pub fn parsed_response(&self) -> ::std::option::Option<&crate::types::PostProcessingParsedResponse> {
        self.parsed_response.as_ref()
    }
}
impl ::std::fmt::Debug for PostProcessingModelInvocationOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PostProcessingModelInvocationOutput");
        formatter.field("trace_id", &"*** Sensitive Data Redacted ***");
        formatter.field("parsed_response", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl PostProcessingModelInvocationOutput {
    /// Creates a new builder-style object to manufacture [`PostProcessingModelInvocationOutput`](crate::types::PostProcessingModelInvocationOutput).
    pub fn builder() -> crate::types::builders::PostProcessingModelInvocationOutputBuilder {
        crate::types::builders::PostProcessingModelInvocationOutputBuilder::default()
    }
}

/// A builder for [`PostProcessingModelInvocationOutput`](crate::types::PostProcessingModelInvocationOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct PostProcessingModelInvocationOutputBuilder {
    pub(crate) trace_id: ::std::option::Option<::std::string::String>,
    pub(crate) parsed_response: ::std::option::Option<crate::types::PostProcessingParsedResponse>,
}
impl PostProcessingModelInvocationOutputBuilder {
    /// <p>The unique identifier of the trace.</p>
    pub fn trace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the trace.</p>
    pub fn set_trace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trace_id = input;
        self
    }
    /// <p>The unique identifier of the trace.</p>
    pub fn get_trace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.trace_id
    }
    /// <p>Details about the response from the Lambda parsing of the output of the post-processing step.</p>
    pub fn parsed_response(mut self, input: crate::types::PostProcessingParsedResponse) -> Self {
        self.parsed_response = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the response from the Lambda parsing of the output of the post-processing step.</p>
    pub fn set_parsed_response(mut self, input: ::std::option::Option<crate::types::PostProcessingParsedResponse>) -> Self {
        self.parsed_response = input;
        self
    }
    /// <p>Details about the response from the Lambda parsing of the output of the post-processing step.</p>
    pub fn get_parsed_response(&self) -> &::std::option::Option<crate::types::PostProcessingParsedResponse> {
        &self.parsed_response
    }
    /// Consumes the builder and constructs a [`PostProcessingModelInvocationOutput`](crate::types::PostProcessingModelInvocationOutput).
    pub fn build(self) -> crate::types::PostProcessingModelInvocationOutput {
        crate::types::PostProcessingModelInvocationOutput {
            trace_id: self.trace_id,
            parsed_response: self.parsed_response,
        }
    }
}
impl ::std::fmt::Debug for PostProcessingModelInvocationOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PostProcessingModelInvocationOutputBuilder");
        formatter.field("trace_id", &"*** Sensitive Data Redacted ***");
        formatter.field("parsed_response", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
