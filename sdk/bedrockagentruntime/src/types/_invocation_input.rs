// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information pertaining to the action group or knowledge base that is being invoked.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct InvocationInput {
    /// <p>The unique identifier of the trace.</p>
    pub trace_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the agent is invoking an action group or a knowledge base.</p>
    pub invocation_type: ::std::option::Option<crate::types::InvocationType>,
    /// <p>Contains information about the action group to be invoked.</p>
    pub action_group_invocation_input: ::std::option::Option<crate::types::ActionGroupInvocationInput>,
    /// <p>Contains details about the knowledge base to look up and the query to be made.</p>
    pub knowledge_base_lookup_input: ::std::option::Option<crate::types::KnowledgeBaseLookupInput>,
}
impl InvocationInput {
    /// <p>The unique identifier of the trace.</p>
    pub fn trace_id(&self) -> ::std::option::Option<&str> {
        self.trace_id.as_deref()
    }
    /// <p>Specifies whether the agent is invoking an action group or a knowledge base.</p>
    pub fn invocation_type(&self) -> ::std::option::Option<&crate::types::InvocationType> {
        self.invocation_type.as_ref()
    }
    /// <p>Contains information about the action group to be invoked.</p>
    pub fn action_group_invocation_input(&self) -> ::std::option::Option<&crate::types::ActionGroupInvocationInput> {
        self.action_group_invocation_input.as_ref()
    }
    /// <p>Contains details about the knowledge base to look up and the query to be made.</p>
    pub fn knowledge_base_lookup_input(&self) -> ::std::option::Option<&crate::types::KnowledgeBaseLookupInput> {
        self.knowledge_base_lookup_input.as_ref()
    }
}
impl ::std::fmt::Debug for InvocationInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InvocationInput");
        formatter.field("trace_id", &"*** Sensitive Data Redacted ***");
        formatter.field("invocation_type", &"*** Sensitive Data Redacted ***");
        formatter.field("action_group_invocation_input", &"*** Sensitive Data Redacted ***");
        formatter.field("knowledge_base_lookup_input", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl InvocationInput {
    /// Creates a new builder-style object to manufacture [`InvocationInput`](crate::types::InvocationInput).
    pub fn builder() -> crate::types::builders::InvocationInputBuilder {
        crate::types::builders::InvocationInputBuilder::default()
    }
}

/// A builder for [`InvocationInput`](crate::types::InvocationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct InvocationInputBuilder {
    pub(crate) trace_id: ::std::option::Option<::std::string::String>,
    pub(crate) invocation_type: ::std::option::Option<crate::types::InvocationType>,
    pub(crate) action_group_invocation_input: ::std::option::Option<crate::types::ActionGroupInvocationInput>,
    pub(crate) knowledge_base_lookup_input: ::std::option::Option<crate::types::KnowledgeBaseLookupInput>,
}
impl InvocationInputBuilder {
    /// <p>The unique identifier of the trace.</p>
    pub fn trace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the trace.</p>
    pub fn set_trace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trace_id = input;
        self
    }
    /// <p>The unique identifier of the trace.</p>
    pub fn get_trace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.trace_id
    }
    /// <p>Specifies whether the agent is invoking an action group or a knowledge base.</p>
    pub fn invocation_type(mut self, input: crate::types::InvocationType) -> Self {
        self.invocation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the agent is invoking an action group or a knowledge base.</p>
    pub fn set_invocation_type(mut self, input: ::std::option::Option<crate::types::InvocationType>) -> Self {
        self.invocation_type = input;
        self
    }
    /// <p>Specifies whether the agent is invoking an action group or a knowledge base.</p>
    pub fn get_invocation_type(&self) -> &::std::option::Option<crate::types::InvocationType> {
        &self.invocation_type
    }
    /// <p>Contains information about the action group to be invoked.</p>
    pub fn action_group_invocation_input(mut self, input: crate::types::ActionGroupInvocationInput) -> Self {
        self.action_group_invocation_input = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the action group to be invoked.</p>
    pub fn set_action_group_invocation_input(mut self, input: ::std::option::Option<crate::types::ActionGroupInvocationInput>) -> Self {
        self.action_group_invocation_input = input;
        self
    }
    /// <p>Contains information about the action group to be invoked.</p>
    pub fn get_action_group_invocation_input(&self) -> &::std::option::Option<crate::types::ActionGroupInvocationInput> {
        &self.action_group_invocation_input
    }
    /// <p>Contains details about the knowledge base to look up and the query to be made.</p>
    pub fn knowledge_base_lookup_input(mut self, input: crate::types::KnowledgeBaseLookupInput) -> Self {
        self.knowledge_base_lookup_input = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the knowledge base to look up and the query to be made.</p>
    pub fn set_knowledge_base_lookup_input(mut self, input: ::std::option::Option<crate::types::KnowledgeBaseLookupInput>) -> Self {
        self.knowledge_base_lookup_input = input;
        self
    }
    /// <p>Contains details about the knowledge base to look up and the query to be made.</p>
    pub fn get_knowledge_base_lookup_input(&self) -> &::std::option::Option<crate::types::KnowledgeBaseLookupInput> {
        &self.knowledge_base_lookup_input
    }
    /// Consumes the builder and constructs a [`InvocationInput`](crate::types::InvocationInput).
    pub fn build(self) -> crate::types::InvocationInput {
        crate::types::InvocationInput {
            trace_id: self.trace_id,
            invocation_type: self.invocation_type,
            action_group_invocation_input: self.action_group_invocation_input,
            knowledge_base_lookup_input: self.knowledge_base_lookup_input,
        }
    }
}
impl ::std::fmt::Debug for InvocationInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InvocationInputBuilder");
        formatter.field("trace_id", &"*** Sensitive Data Redacted ***");
        formatter.field("invocation_type", &"*** Sensitive Data Redacted ***");
        formatter.field("action_group_invocation_input", &"*** Sensitive Data Redacted ***");
        formatter.field("knowledge_base_lookup_input", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
