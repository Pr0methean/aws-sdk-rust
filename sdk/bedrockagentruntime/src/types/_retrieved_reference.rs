// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains metadata about a sources cited for the generated response.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RetrievedReference  {
    /// <p>Contains the cited text from the data source.</p>
    pub content: ::std::option::Option<crate::types::RetrievalResultContent>,
    /// <p>Contains information about the location of the data source.</p>
    pub location: ::std::option::Option<crate::types::RetrievalResultLocation>,
}
impl  RetrievedReference  {
    /// <p>Contains the cited text from the data source.</p>
    pub fn content(&self) -> ::std::option::Option<& crate::types::RetrievalResultContent> {
        self.content.as_ref()
    }
    /// <p>Contains information about the location of the data source.</p>
    pub fn location(&self) -> ::std::option::Option<& crate::types::RetrievalResultLocation> {
        self.location.as_ref()
    }
}
impl  ::std::fmt::Debug for RetrievedReference  {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RetrievedReference");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.field("location", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RetrievedReference {
    /// Creates a new builder-style object to manufacture [`RetrievedReference`](crate::types::RetrievedReference).
    pub fn builder() -> crate::types::builders::RetrievedReferenceBuilder {
        crate::types::builders::RetrievedReferenceBuilder::default()
    }
}

/// A builder for [`RetrievedReference`](crate::types::RetrievedReference).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct RetrievedReferenceBuilder {
    pub(crate) content: ::std::option::Option<crate::types::RetrievalResultContent>,
    pub(crate) location: ::std::option::Option<crate::types::RetrievalResultLocation>,
}
impl RetrievedReferenceBuilder {
    /// <p>Contains the cited text from the data source.</p>
    pub fn content(mut self, input: crate::types::RetrievalResultContent) -> Self {
        self.content = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the cited text from the data source.</p>
    pub fn set_content(mut self, input: ::std::option::Option<crate::types::RetrievalResultContent>) -> Self {
        self.content = input; self
    }
    /// <p>Contains the cited text from the data source.</p>
    pub fn get_content(&self) -> &::std::option::Option<crate::types::RetrievalResultContent> {
        &self.content
    }
    /// <p>Contains information about the location of the data source.</p>
    pub fn location(mut self, input: crate::types::RetrievalResultLocation) -> Self {
        self.location = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the location of the data source.</p>
    pub fn set_location(mut self, input: ::std::option::Option<crate::types::RetrievalResultLocation>) -> Self {
        self.location = input; self
    }
    /// <p>Contains information about the location of the data source.</p>
    pub fn get_location(&self) -> &::std::option::Option<crate::types::RetrievalResultLocation> {
        &self.location
    }
    /// Consumes the builder and constructs a [`RetrievedReference`](crate::types::RetrievedReference).
    pub fn build(self) -> crate::types::RetrievedReference {
        crate::types::RetrievedReference {
            content: self.content
            ,
            location: self.location
            ,
        }
    }
}
impl ::std::fmt::Debug for RetrievedReferenceBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RetrievedReferenceBuilder");
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.field("location", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}

