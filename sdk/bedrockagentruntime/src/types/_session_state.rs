// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains parameters that specify various attributes that persist across a session or prompt. You can define session state attributes as key-value pairs when writing a <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-lambda.html">Lambda function</a> for an action group or pass them when making an <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html">InvokeAgent</a> request. Use session state attributes to control and provide conversational context for your agent and to help customize your agent's behavior. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/sessionstate.html">Session context</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SessionState {
    /// <p>Contains attributes that persist across a session and the values of those attributes.</p>
    pub session_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Contains attributes that persist across a prompt and the values of those attributes. These attributes replace the $prompt_session_attributes$ placeholder variable in the orchestration prompt template. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-placeholders.html">Prompt template placeholder variables</a>.</p>
    pub prompt_session_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl SessionState {
    /// <p>Contains attributes that persist across a session and the values of those attributes.</p>
    pub fn session_attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.session_attributes.as_ref()
    }
    /// <p>Contains attributes that persist across a prompt and the values of those attributes. These attributes replace the $prompt_session_attributes$ placeholder variable in the orchestration prompt template. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-placeholders.html">Prompt template placeholder variables</a>.</p>
    pub fn prompt_session_attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.prompt_session_attributes.as_ref()
    }
}
impl SessionState {
    /// Creates a new builder-style object to manufacture [`SessionState`](crate::types::SessionState).
    pub fn builder() -> crate::types::builders::SessionStateBuilder {
        crate::types::builders::SessionStateBuilder::default()
    }
}

/// A builder for [`SessionState`](crate::types::SessionState).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SessionStateBuilder {
    pub(crate) session_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) prompt_session_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl SessionStateBuilder {
    /// Adds a key-value pair to `session_attributes`.
    ///
    /// To override the contents of this collection use [`set_session_attributes`](Self::set_session_attributes).
    ///
    /// <p>Contains attributes that persist across a session and the values of those attributes.</p>
    pub fn session_attributes(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.session_attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.session_attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Contains attributes that persist across a session and the values of those attributes.</p>
    pub fn set_session_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.session_attributes = input;
        self
    }
    /// <p>Contains attributes that persist across a session and the values of those attributes.</p>
    pub fn get_session_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.session_attributes
    }
    /// Adds a key-value pair to `prompt_session_attributes`.
    ///
    /// To override the contents of this collection use [`set_prompt_session_attributes`](Self::set_prompt_session_attributes).
    ///
    /// <p>Contains attributes that persist across a prompt and the values of those attributes. These attributes replace the $prompt_session_attributes$ placeholder variable in the orchestration prompt template. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-placeholders.html">Prompt template placeholder variables</a>.</p>
    pub fn prompt_session_attributes(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.prompt_session_attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.prompt_session_attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Contains attributes that persist across a prompt and the values of those attributes. These attributes replace the $prompt_session_attributes$ placeholder variable in the orchestration prompt template. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-placeholders.html">Prompt template placeholder variables</a>.</p>
    pub fn set_prompt_session_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.prompt_session_attributes = input;
        self
    }
    /// <p>Contains attributes that persist across a prompt and the values of those attributes. These attributes replace the $prompt_session_attributes$ placeholder variable in the orchestration prompt template. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-placeholders.html">Prompt template placeholder variables</a>.</p>
    pub fn get_prompt_session_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.prompt_session_attributes
    }
    /// Consumes the builder and constructs a [`SessionState`](crate::types::SessionState).
    pub fn build(self) -> crate::types::SessionState {
        crate::types::SessionState {
            session_attributes: self.session_attributes,
            prompt_session_attributes: self.prompt_session_attributes,
        }
    }
}
