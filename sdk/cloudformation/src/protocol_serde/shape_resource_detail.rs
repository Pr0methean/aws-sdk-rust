// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_resource_detail(decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::types::ResourceDetail, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::ResourceDetail::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ResourceType") /* ResourceType com.amazonaws.cloudformation#ResourceDetail$ResourceType */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_1);
            }
            ,
            s if s.matches("LogicalResourceId") /* LogicalResourceId com.amazonaws.cloudformation#ResourceDetail$LogicalResourceId */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_logical_resource_id(var_2);
            }
            ,
            s if s.matches("ResourceIdentifier") /* ResourceIdentifier com.amazonaws.cloudformation#ResourceDetail$ResourceIdentifier */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_resource_identifier_properties::de_resource_identifier_properties(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_identifier(var_3);
            }
            ,
            s if s.matches("ResourceStatus") /* ResourceStatus com.amazonaws.cloudformation#ResourceDetail$ResourceStatus */ =>  {
                let var_4 =
                    Some(
                        Result::<crate::types::GeneratedTemplateResourceStatus, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::GeneratedTemplateResourceStatus::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_status(var_4);
            }
            ,
            s if s.matches("ResourceStatusReason") /* ResourceStatusReason com.amazonaws.cloudformation#ResourceDetail$ResourceStatusReason */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_status_reason(var_5);
            }
            ,
            s if s.matches("Warnings") /* Warnings com.amazonaws.cloudformation#ResourceDetail$Warnings */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_warning_details::de_warning_details(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_warnings(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

