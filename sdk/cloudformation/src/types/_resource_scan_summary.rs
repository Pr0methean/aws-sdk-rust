// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of the resource scan. This is returned by the <code>ListResourceScan</code> API action.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceScanSummary  {
    /// <p>The Amazon Resource Name (ARN) of the resource scan.</p>
    pub resource_scan_id: ::std::option::Option<::std::string::String>,
    /// <p>Status of the resource scan.</p>
    /// <dl>
    /// <dt>
    /// INPROGRESS
    /// </dt>
    /// <dd>
    /// <p>The resource scan is still in progress.</p>
    /// </dd>
    /// <dt>
    /// COMPLETE
    /// </dt>
    /// <dd>
    /// <p>The resource scan is complete.</p>
    /// </dd>
    /// <dt>
    /// EXPIRED
    /// </dt>
    /// <dd>
    /// <p>The resource scan has expired.</p>
    /// </dd>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>The resource scan has failed.</p>
    /// </dd>
    /// </dl>
    pub status: ::std::option::Option<crate::types::ResourceScanStatus>,
    /// <p>The reason for the resource scan status, providing more information if a failure happened.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The time that the resource scan was started.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that the resource scan was finished.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The percentage of the resource scan that has been completed.</p>
    pub percentage_completed: ::std::option::Option<f64>,
}
impl  ResourceScanSummary  {
    /// <p>The Amazon Resource Name (ARN) of the resource scan.</p>
    pub fn resource_scan_id(&self) -> ::std::option::Option<& str> {
        self.resource_scan_id.as_deref()
    }
    /// <p>Status of the resource scan.</p>
    /// <dl>
    /// <dt>
    /// INPROGRESS
    /// </dt>
    /// <dd>
    /// <p>The resource scan is still in progress.</p>
    /// </dd>
    /// <dt>
    /// COMPLETE
    /// </dt>
    /// <dd>
    /// <p>The resource scan is complete.</p>
    /// </dd>
    /// <dt>
    /// EXPIRED
    /// </dt>
    /// <dd>
    /// <p>The resource scan has expired.</p>
    /// </dd>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>The resource scan has failed.</p>
    /// </dd>
    /// </dl>
    pub fn status(&self) -> ::std::option::Option<& crate::types::ResourceScanStatus> {
        self.status.as_ref()
    }
    /// <p>The reason for the resource scan status, providing more information if a failure happened.</p>
    pub fn status_reason(&self) -> ::std::option::Option<& str> {
        self.status_reason.as_deref()
    }
    /// <p>The time that the resource scan was started.</p>
    pub fn start_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The time that the resource scan was finished.</p>
    pub fn end_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The percentage of the resource scan that has been completed.</p>
    pub fn percentage_completed(&self) -> ::std::option::Option<f64> {
        self.percentage_completed
    }
}
impl ResourceScanSummary {
    /// Creates a new builder-style object to manufacture [`ResourceScanSummary`](crate::types::ResourceScanSummary).
    pub fn builder() -> crate::types::builders::ResourceScanSummaryBuilder {
        crate::types::builders::ResourceScanSummaryBuilder::default()
    }
}

/// A builder for [`ResourceScanSummary`](crate::types::ResourceScanSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourceScanSummaryBuilder {
    pub(crate) resource_scan_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ResourceScanStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) percentage_completed: ::std::option::Option<f64>,
}
impl ResourceScanSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the resource scan.</p>
    pub fn resource_scan_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_scan_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource scan.</p>
    pub fn set_resource_scan_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_scan_id = input; self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource scan.</p>
    pub fn get_resource_scan_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_scan_id
    }
    /// <p>Status of the resource scan.</p>
    /// <dl>
    /// <dt>
    /// INPROGRESS
    /// </dt>
    /// <dd>
    /// <p>The resource scan is still in progress.</p>
    /// </dd>
    /// <dt>
    /// COMPLETE
    /// </dt>
    /// <dd>
    /// <p>The resource scan is complete.</p>
    /// </dd>
    /// <dt>
    /// EXPIRED
    /// </dt>
    /// <dd>
    /// <p>The resource scan has expired.</p>
    /// </dd>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>The resource scan has failed.</p>
    /// </dd>
    /// </dl>
    pub fn status(mut self, input: crate::types::ResourceScanStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the resource scan.</p>
    /// <dl>
    /// <dt>
    /// INPROGRESS
    /// </dt>
    /// <dd>
    /// <p>The resource scan is still in progress.</p>
    /// </dd>
    /// <dt>
    /// COMPLETE
    /// </dt>
    /// <dd>
    /// <p>The resource scan is complete.</p>
    /// </dd>
    /// <dt>
    /// EXPIRED
    /// </dt>
    /// <dd>
    /// <p>The resource scan has expired.</p>
    /// </dd>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>The resource scan has failed.</p>
    /// </dd>
    /// </dl>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ResourceScanStatus>) -> Self {
        self.status = input; self
    }
    /// <p>Status of the resource scan.</p>
    /// <dl>
    /// <dt>
    /// INPROGRESS
    /// </dt>
    /// <dd>
    /// <p>The resource scan is still in progress.</p>
    /// </dd>
    /// <dt>
    /// COMPLETE
    /// </dt>
    /// <dd>
    /// <p>The resource scan is complete.</p>
    /// </dd>
    /// <dt>
    /// EXPIRED
    /// </dt>
    /// <dd>
    /// <p>The resource scan has expired.</p>
    /// </dd>
    /// <dt>
    /// FAILED
    /// </dt>
    /// <dd>
    /// <p>The resource scan has failed.</p>
    /// </dd>
    /// </dl>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ResourceScanStatus> {
        &self.status
    }
    /// <p>The reason for the resource scan status, providing more information if a failure happened.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the resource scan status, providing more information if a failure happened.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input; self
    }
    /// <p>The reason for the resource scan status, providing more information if a failure happened.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The time that the resource scan was started.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the resource scan was started.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input; self
    }
    /// <p>The time that the resource scan was started.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The time that the resource scan was finished.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the resource scan was finished.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input; self
    }
    /// <p>The time that the resource scan was finished.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The percentage of the resource scan that has been completed.</p>
    pub fn percentage_completed(mut self, input: f64) -> Self {
        self.percentage_completed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage of the resource scan that has been completed.</p>
    pub fn set_percentage_completed(mut self, input: ::std::option::Option<f64>) -> Self {
        self.percentage_completed = input; self
    }
    /// <p>The percentage of the resource scan that has been completed.</p>
    pub fn get_percentage_completed(&self) -> &::std::option::Option<f64> {
        &self.percentage_completed
    }
    /// Consumes the builder and constructs a [`ResourceScanSummary`](crate::types::ResourceScanSummary).
    pub fn build(self) -> crate::types::ResourceScanSummary {
        crate::types::ResourceScanSummary {
            resource_scan_id: self.resource_scan_id
            ,
            status: self.status
            ,
            status_reason: self.status_reason
            ,
            start_time: self.start_time
            ,
            end_time: self.end_time
            ,
            percentage_completed: self.percentage_completed
            ,
        }
    }
}

