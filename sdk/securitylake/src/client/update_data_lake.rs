// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateDataLake`](crate::operation::update_data_lake::builders::UpdateDataLakeFluentBuilder) operation.
                            ///
                            /// - The fluent builder is configurable:
    ///   - [`configurations(DataLakeConfiguration)`](crate::operation::update_data_lake::builders::UpdateDataLakeFluentBuilder::configurations) / [`set_configurations(Option<Vec::<DataLakeConfiguration>>)`](crate::operation::update_data_lake::builders::UpdateDataLakeFluentBuilder::set_configurations):<br>required: **true**<br><p>Specify the Region or Regions that will contribute data to the rollup region.</p><br>
    ///   - [`meta_store_manager_role_arn(impl Into<String>)`](crate::operation::update_data_lake::builders::UpdateDataLakeFluentBuilder::meta_store_manager_role_arn) / [`set_meta_store_manager_role_arn(Option<String>)`](crate::operation::update_data_lake::builders::UpdateDataLakeFluentBuilder::set_meta_store_manager_role_arn):<br>required: **false**<br><p>The Amazon Resource Name (ARN) used to create and update the Glue table. This table contains partitions generated by the ingestion and normalization of Amazon Web Services log sources and custom sources.</p><br>
                            /// - On success, responds with [`UpdateDataLakeOutput`](crate::operation::update_data_lake::UpdateDataLakeOutput) with field(s):
    ///   - [`data_lakes(Option<Vec::<DataLakeResource>>)`](crate::operation::update_data_lake::UpdateDataLakeOutput::data_lakes): <p>The created Security Lake configuration object.</p>
                            /// - On failure, responds with [`SdkError<UpdateDataLakeError>`](crate::operation::update_data_lake::UpdateDataLakeError)
    pub fn update_data_lake(&self) -> crate::operation::update_data_lake::builders::UpdateDataLakeFluentBuilder {
                                crate::operation::update_data_lake::builders::UpdateDataLakeFluentBuilder::new(self.handle.clone())
                            }
}

