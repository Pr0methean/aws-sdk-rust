// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_graphql_api_input_input(
                         object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
                         input: &crate::operation::create_graphql_api::CreateGraphqlApiInput,
                    ) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.additional_authentication_providers {
        let mut array_2 = object.key("additionalAuthenticationProviders").start_array();
        for item_3 in var_1 {
             {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_additional_authentication_provider::ser_additional_authentication_provider(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.api_type {
        object.key("apiType").string(var_5.as_str());
    }
    if let Some(var_6) = &input.authentication_type {
        object.key("authenticationType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.enhanced_metrics_config {
        #[allow(unused_mut)]
        let mut object_8 = object.key("enhancedMetricsConfig").start_object();
        crate::protocol_serde::shape_enhanced_metrics_config::ser_enhanced_metrics_config(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.introspection_config {
        object.key("introspectionConfig").string(var_9.as_str());
    }
    if let Some(var_10) = &input.lambda_authorizer_config {
        #[allow(unused_mut)]
        let mut object_11 = object.key("lambdaAuthorizerConfig").start_object();
        crate::protocol_serde::shape_lambda_authorizer_config::ser_lambda_authorizer_config(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.log_config {
        #[allow(unused_mut)]
        let mut object_13 = object.key("logConfig").start_object();
        crate::protocol_serde::shape_log_config::ser_log_config(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.merged_api_execution_role_arn {
        object.key("mergedApiExecutionRoleArn").string(var_14.as_str());
    }
    if let Some(var_15) = &input.name {
        object.key("name").string(var_15.as_str());
    }
    if let Some(var_16) = &input.open_id_connect_config {
        #[allow(unused_mut)]
        let mut object_17 = object.key("openIDConnectConfig").start_object();
        crate::protocol_serde::shape_open_id_connect_config::ser_open_id_connect_config(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.owner_contact {
        object.key("ownerContact").string(var_18.as_str());
    }
    if let Some(var_19) = &input.query_depth_limit {
        object.key("queryDepthLimit").number(#[allow(clippy::useless_conversion)]::aws_smithy_types::Number::NegInt((*var_19).into()));
    }
    if let Some(var_20) = &input.resolver_count_limit {
        object.key("resolverCountLimit").number(#[allow(clippy::useless_conversion)]::aws_smithy_types::Number::NegInt((*var_20).into()));
    }
    if let Some(var_21) = &input.tags {
        #[allow(unused_mut)]
        let mut object_22 = object.key("tags").start_object();
        for (key_23, value_24) in var_21 {
             {
                object_22.key(key_23.as_str()).string(value_24.as_str());
            }
        }
        object_22.finish();
    }
    if let Some(var_25) = &input.user_pool_config {
        #[allow(unused_mut)]
        let mut object_26 = object.key("userPoolConfig").start_object();
        crate::protocol_serde::shape_user_pool_config::ser_user_pool_config(&mut object_26, var_25)?;
        object_26.finish();
    }
    if let Some(var_27) = &input.visibility {
        object.key("visibility").string(var_27.as_str());
    }
    if let Some(var_28) = &input.xray_enabled {
        object.key("xrayEnabled").boolean(*var_28);
    }
    Ok(())
}

