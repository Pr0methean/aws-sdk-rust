// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_list_filtered_transaction_events_input_input(
                         object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
                         input: &crate::operation::list_filtered_transaction_events::ListFilteredTransactionEventsInput,
                    ) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.address_identifier_filter {
        #[allow(unused_mut)]
        let mut object_2 = object.key("addressIdentifierFilter").start_object();
        crate::protocol_serde::shape_address_identifier_filter::ser_address_identifier_filter(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.confirmation_status_filter {
        #[allow(unused_mut)]
        let mut object_4 = object.key("confirmationStatusFilter").start_object();
        crate::protocol_serde::shape_confirmation_status_filter::ser_confirmation_status_filter(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]::aws_smithy_types::Number::NegInt((*var_5).into()));
    }
    if let Some(var_6) = &input.network {
        object.key("network").string(var_6.as_str());
    }
    if let Some(var_7) = &input.next_token {
        object.key("nextToken").string(var_7.as_str());
    }
    if let Some(var_8) = &input.sort {
        #[allow(unused_mut)]
        let mut object_9 = object.key("sort").start_object();
        crate::protocol_serde::shape_list_filtered_transaction_events_sort::ser_list_filtered_transaction_events_sort(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.time_filter {
        #[allow(unused_mut)]
        let mut object_11 = object.key("timeFilter").start_object();
        crate::protocol_serde::shape_time_filter::ser_time_filter(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.vout_filter {
        #[allow(unused_mut)]
        let mut object_13 = object.key("voutFilter").start_object();
        crate::protocol_serde::shape_vout_filter::ser_vout_filter(&mut object_13, var_12)?;
        object_13.finish();
    }
    Ok(())
}

