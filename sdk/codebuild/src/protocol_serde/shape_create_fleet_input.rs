// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_fleet_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_fleet::CreateFleetInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.base_capacity {
        object.key("baseCapacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.environment_type {
        object.key("environmentType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.compute_type {
        object.key("computeType").string(var_4.as_str());
    }
    if let Some(var_5) = &input.scaling_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("scalingConfiguration").start_object();
        crate::protocol_serde::shape_scaling_configuration_input::ser_scaling_configuration_input(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.overflow_behavior {
        object.key("overflowBehavior").string(var_7.as_str());
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("tags").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}
