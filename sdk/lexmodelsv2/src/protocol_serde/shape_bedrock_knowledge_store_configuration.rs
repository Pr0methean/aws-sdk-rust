// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_bedrock_knowledge_store_configuration<'a, I>(tokens: &mut ::std::iter::Peekable<I>) -> Result<Option<crate::types::BedrockKnowledgeStoreConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
                        where I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>> {
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
                        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::BedrockKnowledgeStoreConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                                            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "bedrockKnowledgeBaseArn" => {
                                builder = builder.set_bedrock_knowledge_base_arn(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?.map(|s|
                                        s.to_unescaped().map(|u|
                                            u.into_owned()
                                        )
                                    ).transpose()?
                                );
                            }
                            _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?
                        }
                    }
                    other => return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!("expected object key or end object, found: {:?}", other)))
                }
            }
            Ok(Some(crate::serde_util::bedrock_knowledge_store_configuration_correct_errors(builder).build().map_err(|err|::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?))
        }
        _ => {
            Err(::aws_smithy_json::deserialize::error::DeserializeError::custom("expected start object or null"))
        }
    }
}

pub fn ser_bedrock_knowledge_store_configuration(
                         object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
                         input: &crate::types::BedrockKnowledgeStoreConfiguration,
                    ) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
     {
        object.key("bedrockKnowledgeBaseArn").string(input.bedrock_knowledge_base_arn.as_str());
    }
    Ok(())
}

