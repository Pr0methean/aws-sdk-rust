// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_domain_association_input_input(
                         object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
                         input: &crate::operation::update_domain_association::UpdateDomainAssociationInput,
                    ) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.auto_sub_domain_creation_patterns {
        let mut array_2 = object.key("autoSubDomainCreationPatterns").start_array();
        for item_3 in var_1 {
             {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.auto_sub_domain_iam_role {
        object.key("autoSubDomainIAMRole").string(var_4.as_str());
    }
    if let Some(var_5) = &input.certificate_settings {
        #[allow(unused_mut)]
        let mut object_6 = object.key("certificateSettings").start_object();
        crate::protocol_serde::shape_certificate_settings::ser_certificate_settings(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.enable_auto_sub_domain {
        object.key("enableAutoSubDomain").boolean(*var_7);
    }
    if let Some(var_8) = &input.sub_domain_settings {
        let mut array_9 = object.key("subDomainSettings").start_array();
        for item_10 in var_8 {
             {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_sub_domain_setting::ser_sub_domain_setting(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}

