// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter applied on the <code>ListEnabledBaseline</code> operation. Allowed filters are <code>baselineIdentifiers</code> and <code>targetIdentifiers</code>. The filter can be applied for either, or both.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnabledBaselineFilter  {
    /// <p>Identifiers for the targets of the <code>Baseline</code> filter operation.</p>
    pub target_identifiers: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
    /// <p>Identifiers for the <code>Baseline</code> objects returned as part of the filter operation.</p>
    pub baseline_identifiers: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
}
impl  EnabledBaselineFilter  {
    /// <p>Identifiers for the targets of the <code>Baseline</code> filter operation.</p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_identifiers.is_none()`.
    pub fn target_identifiers(&self) -> & [::std::string::String] {
        self.target_identifiers.as_deref()
        .unwrap_or_default()
    }
    /// <p>Identifiers for the <code>Baseline</code> objects returned as part of the filter operation.</p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.baseline_identifiers.is_none()`.
    pub fn baseline_identifiers(&self) -> & [::std::string::String] {
        self.baseline_identifiers.as_deref()
        .unwrap_or_default()
    }
}
impl EnabledBaselineFilter {
    /// Creates a new builder-style object to manufacture [`EnabledBaselineFilter`](crate::types::EnabledBaselineFilter).
    pub fn builder() -> crate::types::builders::EnabledBaselineFilterBuilder {
        crate::types::builders::EnabledBaselineFilterBuilder::default()
    }
}

/// A builder for [`EnabledBaselineFilter`](crate::types::EnabledBaselineFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EnabledBaselineFilterBuilder {
    pub(crate) target_identifiers: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
    pub(crate) baseline_identifiers: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
}
impl EnabledBaselineFilterBuilder {
    /// Appends an item to `target_identifiers`.
    ///
    /// To override the contents of this collection use [`set_target_identifiers`](Self::set_target_identifiers).
    ///
    /// <p>Identifiers for the targets of the <code>Baseline</code> filter operation.</p>
    pub fn target_identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.target_identifiers.unwrap_or_default();
                        v.push(input.into());
                        self.target_identifiers = ::std::option::Option::Some(v);
                        self
    }
    /// <p>Identifiers for the targets of the <code>Baseline</code> filter operation.</p>
    pub fn set_target_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec::<::std::string::String>>) -> Self {
        self.target_identifiers = input; self
    }
    /// <p>Identifiers for the targets of the <code>Baseline</code> filter operation.</p>
    pub fn get_target_identifiers(&self) -> &::std::option::Option<::std::vec::Vec::<::std::string::String>> {
        &self.target_identifiers
    }
    /// Appends an item to `baseline_identifiers`.
    ///
    /// To override the contents of this collection use [`set_baseline_identifiers`](Self::set_baseline_identifiers).
    ///
    /// <p>Identifiers for the <code>Baseline</code> objects returned as part of the filter operation.</p>
    pub fn baseline_identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.baseline_identifiers.unwrap_or_default();
                        v.push(input.into());
                        self.baseline_identifiers = ::std::option::Option::Some(v);
                        self
    }
    /// <p>Identifiers for the <code>Baseline</code> objects returned as part of the filter operation.</p>
    pub fn set_baseline_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec::<::std::string::String>>) -> Self {
        self.baseline_identifiers = input; self
    }
    /// <p>Identifiers for the <code>Baseline</code> objects returned as part of the filter operation.</p>
    pub fn get_baseline_identifiers(&self) -> &::std::option::Option<::std::vec::Vec::<::std::string::String>> {
        &self.baseline_identifiers
    }
    /// Consumes the builder and constructs a [`EnabledBaselineFilter`](crate::types::EnabledBaselineFilter).
    pub fn build(self) -> crate::types::EnabledBaselineFilter {
        crate::types::EnabledBaselineFilter {
            target_identifiers: self.target_identifiers
            ,
            baseline_identifiers: self.baseline_identifiers
            ,
        }
    }
}

