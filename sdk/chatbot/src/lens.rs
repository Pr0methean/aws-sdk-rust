// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_chime_webhook_configurations_output_output_next_token(input: &crate::operation::describe_chime_webhook_configurations::DescribeChimeWebhookConfigurationsOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_describe_slack_channel_configurations_output_output_next_token(input: &crate::operation::describe_slack_channel_configurations::DescribeSlackChannelConfigurationsOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_describe_slack_user_identities_output_output_next_token(input: &crate::operation::describe_slack_user_identities::DescribeSlackUserIdentitiesOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_describe_slack_workspaces_output_output_next_token(input: &crate::operation::describe_slack_workspaces::DescribeSlackWorkspacesOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_list_microsoft_teams_channel_configurations_output_output_next_token(input: &crate::operation::list_microsoft_teams_channel_configurations::ListMicrosoftTeamsChannelConfigurationsOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_list_microsoft_teams_configured_teams_output_output_next_token(input: &crate::operation::list_microsoft_teams_configured_teams::ListMicrosoftTeamsConfiguredTeamsOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_list_microsoft_teams_user_identities_output_output_next_token(input: &crate::operation::list_microsoft_teams_user_identities::ListMicrosoftTeamsUserIdentitiesOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

