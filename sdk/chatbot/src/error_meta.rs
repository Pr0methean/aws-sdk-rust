// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// There was an issue processing your request.
    ConflictException(crate::types::error::ConflictException),
    /// We can’t process your request right now because of a server issue. Try again later.
    CreateChimeWebhookConfigurationException(crate::types::error::CreateChimeWebhookConfigurationException),
    /// We can’t process your request right now because of a server issue. Try again later.
    CreateSlackChannelConfigurationException(crate::types::error::CreateSlackChannelConfigurationException),
    /// We can’t process your request right now because of a server issue. Try again later.
    CreateTeamsChannelConfigurationException(crate::types::error::CreateTeamsChannelConfigurationException),
    /// We can’t process your request right now because of a server issue. Try again later.
    DeleteChimeWebhookConfigurationException(crate::types::error::DeleteChimeWebhookConfigurationException),
    /// We can’t process your request right now because of a server issue. Try again later.
    DeleteMicrosoftTeamsUserIdentityException(crate::types::error::DeleteMicrosoftTeamsUserIdentityException),
    /// We can’t process your request right now because of a server issue. Try again later.
    DeleteSlackChannelConfigurationException(crate::types::error::DeleteSlackChannelConfigurationException),
    /// We can’t process your request right now because of a server issue. Try again later.
    DeleteSlackUserIdentityException(crate::types::error::DeleteSlackUserIdentityException),
    /// There was an issue deleting your Slack workspace.
    DeleteSlackWorkspaceAuthorizationFault(crate::types::error::DeleteSlackWorkspaceAuthorizationFault),
    /// We can’t process your request right now because of a server issue. Try again later.
    DeleteTeamsChannelConfigurationException(crate::types::error::DeleteTeamsChannelConfigurationException),
    /// We can’t process your request right now because of a server issue. Try again later.
    DeleteTeamsConfiguredTeamException(crate::types::error::DeleteTeamsConfiguredTeamException),
    /// We can’t process your request right now because of a server issue. Try again later.
    DescribeChimeWebhookConfigurationsException(crate::types::error::DescribeChimeWebhookConfigurationsException),
    /// We can’t process your request right now because of a server issue. Try again later.
    DescribeSlackChannelConfigurationsException(crate::types::error::DescribeSlackChannelConfigurationsException),
    /// We can’t process your request right now because of a server issue. Try again later.
    DescribeSlackUserIdentitiesException(crate::types::error::DescribeSlackUserIdentitiesException),
    /// We can’t process your request right now because of a server issue. Try again later.
    DescribeSlackWorkspacesException(crate::types::error::DescribeSlackWorkspacesException),
    /// We can’t process your request right now because of a server issue. Try again later.
    GetAccountPreferencesException(crate::types::error::GetAccountPreferencesException),
    /// We can’t process your request right now because of a server issue. Try again later.
    GetTeamsChannelConfigurationException(crate::types::error::GetTeamsChannelConfigurationException),
    /// Your request input doesn't meet the constraints that AWS Chatbot requires.
    InvalidParameterException(crate::types::error::InvalidParameterException),
    /// Your request input doesn't meet the constraints that AWS Chatbot requires.
    InvalidRequestException(crate::types::error::InvalidRequestException),
    /// You have exceeded a service limit for AWS Chatbot.
    LimitExceededException(crate::types::error::LimitExceededException),
    /// We can’t process your request right now because of a server issue. Try again later.
    ListMicrosoftTeamsConfiguredTeamsException(crate::types::error::ListMicrosoftTeamsConfiguredTeamsException),
    /// We can’t process your request right now because of a server issue. Try again later.
    ListMicrosoftTeamsUserIdentitiesException(crate::types::error::ListMicrosoftTeamsUserIdentitiesException),
    /// We can’t process your request right now because of a server issue. Try again later.
    ListTeamsChannelConfigurationsException(crate::types::error::ListTeamsChannelConfigurationsException),
    /// We were not able to find the resource for your request.
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// We can’t process your request right now because of a server issue. Try again later.
    UpdateAccountPreferencesException(crate::types::error::UpdateAccountPreferencesException),
    /// We can’t process your request right now because of a server issue. Try again later.
    UpdateChimeWebhookConfigurationException(crate::types::error::UpdateChimeWebhookConfigurationException),
    /// We can’t process your request right now because of a server issue. Try again later.
    UpdateSlackChannelConfigurationException(crate::types::error::UpdateSlackChannelConfigurationException),
    /// We can’t process your request right now because of a server issue. Try again later.
    UpdateTeamsChannelConfigurationException(crate::types::error::UpdateTeamsChannelConfigurationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled)
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConflictException(inner) => inner.fmt(f),
            Error::CreateChimeWebhookConfigurationException(inner) => inner.fmt(f),
            Error::CreateSlackChannelConfigurationException(inner) => inner.fmt(f),
            Error::CreateTeamsChannelConfigurationException(inner) => inner.fmt(f),
            Error::DeleteChimeWebhookConfigurationException(inner) => inner.fmt(f),
            Error::DeleteMicrosoftTeamsUserIdentityException(inner) => inner.fmt(f),
            Error::DeleteSlackChannelConfigurationException(inner) => inner.fmt(f),
            Error::DeleteSlackUserIdentityException(inner) => inner.fmt(f),
            Error::DeleteSlackWorkspaceAuthorizationFault(inner) => inner.fmt(f),
            Error::DeleteTeamsChannelConfigurationException(inner) => inner.fmt(f),
            Error::DeleteTeamsConfiguredTeamException(inner) => inner.fmt(f),
            Error::DescribeChimeWebhookConfigurationsException(inner) => inner.fmt(f),
            Error::DescribeSlackChannelConfigurationsException(inner) => inner.fmt(f),
            Error::DescribeSlackUserIdentitiesException(inner) => inner.fmt(f),
            Error::DescribeSlackWorkspacesException(inner) => inner.fmt(f),
            Error::GetAccountPreferencesException(inner) => inner.fmt(f),
            Error::GetTeamsChannelConfigurationException(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ListMicrosoftTeamsConfiguredTeamsException(inner) => inner.fmt(f),
            Error::ListMicrosoftTeamsUserIdentitiesException(inner) => inner.fmt(f),
            Error::ListTeamsChannelConfigurationsException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::UpdateAccountPreferencesException(inner) => inner.fmt(f),
            Error::UpdateChimeWebhookConfigurationException(inner) => inner.fmt(f),
            Error::UpdateSlackChannelConfigurationException(inner) => inner.fmt(f),
            Error::UpdateTeamsChannelConfigurationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                                        write!(f, "unhandled error ({code})")
                                    } else {
                                        f.write_str("unhandled error")
                                    }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
                fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
                    Error::Unhandled(crate::error::sealed_unhandled::Unhandled { source: value.into(), meta: ::std::default::Default::default() })
                }
            }
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
                fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
                    match self {
                        Self::ConflictException(inner) => inner.meta(),
Self::CreateChimeWebhookConfigurationException(inner) => inner.meta(),
Self::CreateSlackChannelConfigurationException(inner) => inner.meta(),
Self::CreateTeamsChannelConfigurationException(inner) => inner.meta(),
Self::DeleteChimeWebhookConfigurationException(inner) => inner.meta(),
Self::DeleteMicrosoftTeamsUserIdentityException(inner) => inner.meta(),
Self::DeleteSlackChannelConfigurationException(inner) => inner.meta(),
Self::DeleteSlackUserIdentityException(inner) => inner.meta(),
Self::DeleteSlackWorkspaceAuthorizationFault(inner) => inner.meta(),
Self::DeleteTeamsChannelConfigurationException(inner) => inner.meta(),
Self::DeleteTeamsConfiguredTeamException(inner) => inner.meta(),
Self::DescribeChimeWebhookConfigurationsException(inner) => inner.meta(),
Self::DescribeSlackChannelConfigurationsException(inner) => inner.meta(),
Self::DescribeSlackUserIdentitiesException(inner) => inner.meta(),
Self::DescribeSlackWorkspacesException(inner) => inner.meta(),
Self::GetAccountPreferencesException(inner) => inner.meta(),
Self::GetTeamsChannelConfigurationException(inner) => inner.meta(),
Self::InvalidParameterException(inner) => inner.meta(),
Self::InvalidRequestException(inner) => inner.meta(),
Self::LimitExceededException(inner) => inner.meta(),
Self::ListMicrosoftTeamsConfiguredTeamsException(inner) => inner.meta(),
Self::ListMicrosoftTeamsUserIdentitiesException(inner) => inner.meta(),
Self::ListTeamsChannelConfigurationsException(inner) => inner.meta(),
Self::ResourceNotFoundException(inner) => inner.meta(),
Self::UpdateAccountPreferencesException(inner) => inner.meta(),
Self::UpdateChimeWebhookConfigurationException(inner) => inner.meta(),
Self::UpdateSlackChannelConfigurationException(inner) => inner.meta(),
Self::UpdateTeamsChannelConfigurationException(inner) => inner.meta(),
                        Self::Unhandled(inner) => &inner.meta,
                    }
                }
            }
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_chime_webhook_configuration::CreateChimeWebhookConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_chime_webhook_configuration::CreateChimeWebhookConfigurationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::create_chime_webhook_configuration::CreateChimeWebhookConfigurationError> for Error {
    fn from(err: crate::operation::create_chime_webhook_configuration::CreateChimeWebhookConfigurationError) -> Self {
        match err {
            crate::operation::create_chime_webhook_configuration::CreateChimeWebhookConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_chime_webhook_configuration::CreateChimeWebhookConfigurationError::CreateChimeWebhookConfigurationException(inner) => Error::CreateChimeWebhookConfigurationException(inner),
            crate::operation::create_chime_webhook_configuration::CreateChimeWebhookConfigurationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::create_chime_webhook_configuration::CreateChimeWebhookConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_chime_webhook_configuration::CreateChimeWebhookConfigurationError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_chime_webhook_configuration::CreateChimeWebhookConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_microsoft_teams_channel_configuration::CreateMicrosoftTeamsChannelConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_microsoft_teams_channel_configuration::CreateMicrosoftTeamsChannelConfigurationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::create_microsoft_teams_channel_configuration::CreateMicrosoftTeamsChannelConfigurationError> for Error {
    fn from(err: crate::operation::create_microsoft_teams_channel_configuration::CreateMicrosoftTeamsChannelConfigurationError) -> Self {
        match err {
            crate::operation::create_microsoft_teams_channel_configuration::CreateMicrosoftTeamsChannelConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_microsoft_teams_channel_configuration::CreateMicrosoftTeamsChannelConfigurationError::CreateTeamsChannelConfigurationException(inner) => Error::CreateTeamsChannelConfigurationException(inner),
            crate::operation::create_microsoft_teams_channel_configuration::CreateMicrosoftTeamsChannelConfigurationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::create_microsoft_teams_channel_configuration::CreateMicrosoftTeamsChannelConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_microsoft_teams_channel_configuration::CreateMicrosoftTeamsChannelConfigurationError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_microsoft_teams_channel_configuration::CreateMicrosoftTeamsChannelConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_slack_channel_configuration::CreateSlackChannelConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_slack_channel_configuration::CreateSlackChannelConfigurationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::create_slack_channel_configuration::CreateSlackChannelConfigurationError> for Error {
    fn from(err: crate::operation::create_slack_channel_configuration::CreateSlackChannelConfigurationError) -> Self {
        match err {
            crate::operation::create_slack_channel_configuration::CreateSlackChannelConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_slack_channel_configuration::CreateSlackChannelConfigurationError::CreateSlackChannelConfigurationException(inner) => Error::CreateSlackChannelConfigurationException(inner),
            crate::operation::create_slack_channel_configuration::CreateSlackChannelConfigurationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::create_slack_channel_configuration::CreateSlackChannelConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_slack_channel_configuration::CreateSlackChannelConfigurationError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_slack_channel_configuration::CreateSlackChannelConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_chime_webhook_configuration::DeleteChimeWebhookConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_chime_webhook_configuration::DeleteChimeWebhookConfigurationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::delete_chime_webhook_configuration::DeleteChimeWebhookConfigurationError> for Error {
    fn from(err: crate::operation::delete_chime_webhook_configuration::DeleteChimeWebhookConfigurationError) -> Self {
        match err {
            crate::operation::delete_chime_webhook_configuration::DeleteChimeWebhookConfigurationError::DeleteChimeWebhookConfigurationException(inner) => Error::DeleteChimeWebhookConfigurationException(inner),
            crate::operation::delete_chime_webhook_configuration::DeleteChimeWebhookConfigurationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::delete_chime_webhook_configuration::DeleteChimeWebhookConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_chime_webhook_configuration::DeleteChimeWebhookConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_chime_webhook_configuration::DeleteChimeWebhookConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_microsoft_teams_channel_configuration::DeleteMicrosoftTeamsChannelConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_microsoft_teams_channel_configuration::DeleteMicrosoftTeamsChannelConfigurationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::delete_microsoft_teams_channel_configuration::DeleteMicrosoftTeamsChannelConfigurationError> for Error {
    fn from(err: crate::operation::delete_microsoft_teams_channel_configuration::DeleteMicrosoftTeamsChannelConfigurationError) -> Self {
        match err {
            crate::operation::delete_microsoft_teams_channel_configuration::DeleteMicrosoftTeamsChannelConfigurationError::DeleteTeamsChannelConfigurationException(inner) => Error::DeleteTeamsChannelConfigurationException(inner),
            crate::operation::delete_microsoft_teams_channel_configuration::DeleteMicrosoftTeamsChannelConfigurationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::delete_microsoft_teams_channel_configuration::DeleteMicrosoftTeamsChannelConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_microsoft_teams_channel_configuration::DeleteMicrosoftTeamsChannelConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_microsoft_teams_channel_configuration::DeleteMicrosoftTeamsChannelConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_microsoft_teams_configured_team::DeleteMicrosoftTeamsConfiguredTeamError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_microsoft_teams_configured_team::DeleteMicrosoftTeamsConfiguredTeamError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::delete_microsoft_teams_configured_team::DeleteMicrosoftTeamsConfiguredTeamError> for Error {
    fn from(err: crate::operation::delete_microsoft_teams_configured_team::DeleteMicrosoftTeamsConfiguredTeamError) -> Self {
        match err {
            crate::operation::delete_microsoft_teams_configured_team::DeleteMicrosoftTeamsConfiguredTeamError::DeleteTeamsConfiguredTeamException(inner) => Error::DeleteTeamsConfiguredTeamException(inner),
            crate::operation::delete_microsoft_teams_configured_team::DeleteMicrosoftTeamsConfiguredTeamError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::delete_microsoft_teams_configured_team::DeleteMicrosoftTeamsConfiguredTeamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_microsoft_teams_user_identity::DeleteMicrosoftTeamsUserIdentityError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_microsoft_teams_user_identity::DeleteMicrosoftTeamsUserIdentityError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::delete_microsoft_teams_user_identity::DeleteMicrosoftTeamsUserIdentityError> for Error {
    fn from(err: crate::operation::delete_microsoft_teams_user_identity::DeleteMicrosoftTeamsUserIdentityError) -> Self {
        match err {
            crate::operation::delete_microsoft_teams_user_identity::DeleteMicrosoftTeamsUserIdentityError::DeleteMicrosoftTeamsUserIdentityException(inner) => Error::DeleteMicrosoftTeamsUserIdentityException(inner),
            crate::operation::delete_microsoft_teams_user_identity::DeleteMicrosoftTeamsUserIdentityError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::delete_microsoft_teams_user_identity::DeleteMicrosoftTeamsUserIdentityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_microsoft_teams_user_identity::DeleteMicrosoftTeamsUserIdentityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_slack_channel_configuration::DeleteSlackChannelConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_slack_channel_configuration::DeleteSlackChannelConfigurationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::delete_slack_channel_configuration::DeleteSlackChannelConfigurationError> for Error {
    fn from(err: crate::operation::delete_slack_channel_configuration::DeleteSlackChannelConfigurationError) -> Self {
        match err {
            crate::operation::delete_slack_channel_configuration::DeleteSlackChannelConfigurationError::DeleteSlackChannelConfigurationException(inner) => Error::DeleteSlackChannelConfigurationException(inner),
            crate::operation::delete_slack_channel_configuration::DeleteSlackChannelConfigurationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::delete_slack_channel_configuration::DeleteSlackChannelConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_slack_channel_configuration::DeleteSlackChannelConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_slack_channel_configuration::DeleteSlackChannelConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_slack_user_identity::DeleteSlackUserIdentityError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_slack_user_identity::DeleteSlackUserIdentityError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::delete_slack_user_identity::DeleteSlackUserIdentityError> for Error {
    fn from(err: crate::operation::delete_slack_user_identity::DeleteSlackUserIdentityError) -> Self {
        match err {
            crate::operation::delete_slack_user_identity::DeleteSlackUserIdentityError::DeleteSlackUserIdentityException(inner) => Error::DeleteSlackUserIdentityException(inner),
            crate::operation::delete_slack_user_identity::DeleteSlackUserIdentityError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::delete_slack_user_identity::DeleteSlackUserIdentityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_slack_user_identity::DeleteSlackUserIdentityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_slack_workspace_authorization::DeleteSlackWorkspaceAuthorizationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_slack_workspace_authorization::DeleteSlackWorkspaceAuthorizationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::delete_slack_workspace_authorization::DeleteSlackWorkspaceAuthorizationError> for Error {
    fn from(err: crate::operation::delete_slack_workspace_authorization::DeleteSlackWorkspaceAuthorizationError) -> Self {
        match err {
            crate::operation::delete_slack_workspace_authorization::DeleteSlackWorkspaceAuthorizationError::DeleteSlackWorkspaceAuthorizationFault(inner) => Error::DeleteSlackWorkspaceAuthorizationFault(inner),
            crate::operation::delete_slack_workspace_authorization::DeleteSlackWorkspaceAuthorizationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::delete_slack_workspace_authorization::DeleteSlackWorkspaceAuthorizationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_chime_webhook_configurations::DescribeChimeWebhookConfigurationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_chime_webhook_configurations::DescribeChimeWebhookConfigurationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::describe_chime_webhook_configurations::DescribeChimeWebhookConfigurationsError> for Error {
    fn from(err: crate::operation::describe_chime_webhook_configurations::DescribeChimeWebhookConfigurationsError) -> Self {
        match err {
            crate::operation::describe_chime_webhook_configurations::DescribeChimeWebhookConfigurationsError::DescribeChimeWebhookConfigurationsException(inner) => Error::DescribeChimeWebhookConfigurationsException(inner),
            crate::operation::describe_chime_webhook_configurations::DescribeChimeWebhookConfigurationsError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::describe_chime_webhook_configurations::DescribeChimeWebhookConfigurationsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_chime_webhook_configurations::DescribeChimeWebhookConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_slack_channel_configurations::DescribeSlackChannelConfigurationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_slack_channel_configurations::DescribeSlackChannelConfigurationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::describe_slack_channel_configurations::DescribeSlackChannelConfigurationsError> for Error {
    fn from(err: crate::operation::describe_slack_channel_configurations::DescribeSlackChannelConfigurationsError) -> Self {
        match err {
            crate::operation::describe_slack_channel_configurations::DescribeSlackChannelConfigurationsError::DescribeSlackChannelConfigurationsException(inner) => Error::DescribeSlackChannelConfigurationsException(inner),
            crate::operation::describe_slack_channel_configurations::DescribeSlackChannelConfigurationsError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::describe_slack_channel_configurations::DescribeSlackChannelConfigurationsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_slack_channel_configurations::DescribeSlackChannelConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_slack_user_identities::DescribeSlackUserIdentitiesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_slack_user_identities::DescribeSlackUserIdentitiesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::describe_slack_user_identities::DescribeSlackUserIdentitiesError> for Error {
    fn from(err: crate::operation::describe_slack_user_identities::DescribeSlackUserIdentitiesError) -> Self {
        match err {
            crate::operation::describe_slack_user_identities::DescribeSlackUserIdentitiesError::DescribeSlackUserIdentitiesException(inner) => Error::DescribeSlackUserIdentitiesException(inner),
            crate::operation::describe_slack_user_identities::DescribeSlackUserIdentitiesError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::describe_slack_user_identities::DescribeSlackUserIdentitiesError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_slack_user_identities::DescribeSlackUserIdentitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_slack_workspaces::DescribeSlackWorkspacesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_slack_workspaces::DescribeSlackWorkspacesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::describe_slack_workspaces::DescribeSlackWorkspacesError> for Error {
    fn from(err: crate::operation::describe_slack_workspaces::DescribeSlackWorkspacesError) -> Self {
        match err {
            crate::operation::describe_slack_workspaces::DescribeSlackWorkspacesError::DescribeSlackWorkspacesException(inner) => Error::DescribeSlackWorkspacesException(inner),
            crate::operation::describe_slack_workspaces::DescribeSlackWorkspacesError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::describe_slack_workspaces::DescribeSlackWorkspacesError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_slack_workspaces::DescribeSlackWorkspacesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_account_preferences::GetAccountPreferencesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_account_preferences::GetAccountPreferencesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::get_account_preferences::GetAccountPreferencesError> for Error {
    fn from(err: crate::operation::get_account_preferences::GetAccountPreferencesError) -> Self {
        match err {
            crate::operation::get_account_preferences::GetAccountPreferencesError::GetAccountPreferencesException(inner) => Error::GetAccountPreferencesException(inner),
            crate::operation::get_account_preferences::GetAccountPreferencesError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::get_account_preferences::GetAccountPreferencesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_microsoft_teams_channel_configuration::GetMicrosoftTeamsChannelConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_microsoft_teams_channel_configuration::GetMicrosoftTeamsChannelConfigurationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::get_microsoft_teams_channel_configuration::GetMicrosoftTeamsChannelConfigurationError> for Error {
    fn from(err: crate::operation::get_microsoft_teams_channel_configuration::GetMicrosoftTeamsChannelConfigurationError) -> Self {
        match err {
            crate::operation::get_microsoft_teams_channel_configuration::GetMicrosoftTeamsChannelConfigurationError::GetTeamsChannelConfigurationException(inner) => Error::GetTeamsChannelConfigurationException(inner),
            crate::operation::get_microsoft_teams_channel_configuration::GetMicrosoftTeamsChannelConfigurationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::get_microsoft_teams_channel_configuration::GetMicrosoftTeamsChannelConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::get_microsoft_teams_channel_configuration::GetMicrosoftTeamsChannelConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_microsoft_teams_channel_configurations::ListMicrosoftTeamsChannelConfigurationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_microsoft_teams_channel_configurations::ListMicrosoftTeamsChannelConfigurationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::list_microsoft_teams_channel_configurations::ListMicrosoftTeamsChannelConfigurationsError> for Error {
    fn from(err: crate::operation::list_microsoft_teams_channel_configurations::ListMicrosoftTeamsChannelConfigurationsError) -> Self {
        match err {
            crate::operation::list_microsoft_teams_channel_configurations::ListMicrosoftTeamsChannelConfigurationsError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::list_microsoft_teams_channel_configurations::ListMicrosoftTeamsChannelConfigurationsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_microsoft_teams_channel_configurations::ListMicrosoftTeamsChannelConfigurationsError::ListTeamsChannelConfigurationsException(inner) => Error::ListTeamsChannelConfigurationsException(inner),
            crate::operation::list_microsoft_teams_channel_configurations::ListMicrosoftTeamsChannelConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_microsoft_teams_configured_teams::ListMicrosoftTeamsConfiguredTeamsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_microsoft_teams_configured_teams::ListMicrosoftTeamsConfiguredTeamsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::list_microsoft_teams_configured_teams::ListMicrosoftTeamsConfiguredTeamsError> for Error {
    fn from(err: crate::operation::list_microsoft_teams_configured_teams::ListMicrosoftTeamsConfiguredTeamsError) -> Self {
        match err {
            crate::operation::list_microsoft_teams_configured_teams::ListMicrosoftTeamsConfiguredTeamsError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::list_microsoft_teams_configured_teams::ListMicrosoftTeamsConfiguredTeamsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_microsoft_teams_configured_teams::ListMicrosoftTeamsConfiguredTeamsError::ListMicrosoftTeamsConfiguredTeamsException(inner) => Error::ListMicrosoftTeamsConfiguredTeamsException(inner),
            crate::operation::list_microsoft_teams_configured_teams::ListMicrosoftTeamsConfiguredTeamsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_microsoft_teams_user_identities::ListMicrosoftTeamsUserIdentitiesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_microsoft_teams_user_identities::ListMicrosoftTeamsUserIdentitiesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::list_microsoft_teams_user_identities::ListMicrosoftTeamsUserIdentitiesError> for Error {
    fn from(err: crate::operation::list_microsoft_teams_user_identities::ListMicrosoftTeamsUserIdentitiesError) -> Self {
        match err {
            crate::operation::list_microsoft_teams_user_identities::ListMicrosoftTeamsUserIdentitiesError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::list_microsoft_teams_user_identities::ListMicrosoftTeamsUserIdentitiesError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_microsoft_teams_user_identities::ListMicrosoftTeamsUserIdentitiesError::ListMicrosoftTeamsUserIdentitiesException(inner) => Error::ListMicrosoftTeamsUserIdentitiesException(inner),
            crate::operation::list_microsoft_teams_user_identities::ListMicrosoftTeamsUserIdentitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_account_preferences::UpdateAccountPreferencesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_account_preferences::UpdateAccountPreferencesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::update_account_preferences::UpdateAccountPreferencesError> for Error {
    fn from(err: crate::operation::update_account_preferences::UpdateAccountPreferencesError) -> Self {
        match err {
            crate::operation::update_account_preferences::UpdateAccountPreferencesError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::update_account_preferences::UpdateAccountPreferencesError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_account_preferences::UpdateAccountPreferencesError::UpdateAccountPreferencesException(inner) => Error::UpdateAccountPreferencesException(inner),
            crate::operation::update_account_preferences::UpdateAccountPreferencesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_chime_webhook_configuration::UpdateChimeWebhookConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_chime_webhook_configuration::UpdateChimeWebhookConfigurationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::update_chime_webhook_configuration::UpdateChimeWebhookConfigurationError> for Error {
    fn from(err: crate::operation::update_chime_webhook_configuration::UpdateChimeWebhookConfigurationError) -> Self {
        match err {
            crate::operation::update_chime_webhook_configuration::UpdateChimeWebhookConfigurationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::update_chime_webhook_configuration::UpdateChimeWebhookConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_chime_webhook_configuration::UpdateChimeWebhookConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_chime_webhook_configuration::UpdateChimeWebhookConfigurationError::UpdateChimeWebhookConfigurationException(inner) => Error::UpdateChimeWebhookConfigurationException(inner),
            crate::operation::update_chime_webhook_configuration::UpdateChimeWebhookConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_microsoft_teams_channel_configuration::UpdateMicrosoftTeamsChannelConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_microsoft_teams_channel_configuration::UpdateMicrosoftTeamsChannelConfigurationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::update_microsoft_teams_channel_configuration::UpdateMicrosoftTeamsChannelConfigurationError> for Error {
    fn from(err: crate::operation::update_microsoft_teams_channel_configuration::UpdateMicrosoftTeamsChannelConfigurationError) -> Self {
        match err {
            crate::operation::update_microsoft_teams_channel_configuration::UpdateMicrosoftTeamsChannelConfigurationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::update_microsoft_teams_channel_configuration::UpdateMicrosoftTeamsChannelConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_microsoft_teams_channel_configuration::UpdateMicrosoftTeamsChannelConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_microsoft_teams_channel_configuration::UpdateMicrosoftTeamsChannelConfigurationError::UpdateTeamsChannelConfigurationException(inner) => Error::UpdateTeamsChannelConfigurationException(inner),
            crate::operation::update_microsoft_teams_channel_configuration::UpdateMicrosoftTeamsChannelConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            crate::error::sealed_unhandled::Unhandled {
                                                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                                source: err.into(),
                                            }
                                        ),
        }
    }
}
impl From<crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError> for Error {
    fn from(err: crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError) -> Self {
        match err {
            crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError::UpdateSlackChannelConfigurationException(inner) => Error::UpdateSlackChannelConfigurationException(inner),
            crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::ConflictException(inner) => inner.source(),
            Error::CreateChimeWebhookConfigurationException(inner) => inner.source(),
            Error::CreateSlackChannelConfigurationException(inner) => inner.source(),
            Error::CreateTeamsChannelConfigurationException(inner) => inner.source(),
            Error::DeleteChimeWebhookConfigurationException(inner) => inner.source(),
            Error::DeleteMicrosoftTeamsUserIdentityException(inner) => inner.source(),
            Error::DeleteSlackChannelConfigurationException(inner) => inner.source(),
            Error::DeleteSlackUserIdentityException(inner) => inner.source(),
            Error::DeleteSlackWorkspaceAuthorizationFault(inner) => inner.source(),
            Error::DeleteTeamsChannelConfigurationException(inner) => inner.source(),
            Error::DeleteTeamsConfiguredTeamException(inner) => inner.source(),
            Error::DescribeChimeWebhookConfigurationsException(inner) => inner.source(),
            Error::DescribeSlackChannelConfigurationsException(inner) => inner.source(),
            Error::DescribeSlackUserIdentitiesException(inner) => inner.source(),
            Error::DescribeSlackWorkspacesException(inner) => inner.source(),
            Error::GetAccountPreferencesException(inner) => inner.source(),
            Error::GetTeamsChannelConfigurationException(inner) => inner.source(),
            Error::InvalidParameterException(inner) => inner.source(),
            Error::InvalidRequestException(inner) => inner.source(),
            Error::LimitExceededException(inner) => inner.source(),
            Error::ListMicrosoftTeamsConfiguredTeamsException(inner) => inner.source(),
            Error::ListMicrosoftTeamsUserIdentitiesException(inner) => inner.source(),
            Error::ListTeamsChannelConfigurationsException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::UpdateAccountPreferencesException(inner) => inner.source(),
            Error::UpdateChimeWebhookConfigurationException(inner) => inner.source(),
            Error::UpdateSlackChannelConfigurationException(inner) => inner.source(),
            Error::UpdateTeamsChannelConfigurationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source)
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ConflictException(e) => e.request_id(),
            Self::CreateChimeWebhookConfigurationException(e) => e.request_id(),
            Self::CreateSlackChannelConfigurationException(e) => e.request_id(),
            Self::CreateTeamsChannelConfigurationException(e) => e.request_id(),
            Self::DeleteChimeWebhookConfigurationException(e) => e.request_id(),
            Self::DeleteMicrosoftTeamsUserIdentityException(e) => e.request_id(),
            Self::DeleteSlackChannelConfigurationException(e) => e.request_id(),
            Self::DeleteSlackUserIdentityException(e) => e.request_id(),
            Self::DeleteSlackWorkspaceAuthorizationFault(e) => e.request_id(),
            Self::DeleteTeamsChannelConfigurationException(e) => e.request_id(),
            Self::DeleteTeamsConfiguredTeamException(e) => e.request_id(),
            Self::DescribeChimeWebhookConfigurationsException(e) => e.request_id(),
            Self::DescribeSlackChannelConfigurationsException(e) => e.request_id(),
            Self::DescribeSlackUserIdentitiesException(e) => e.request_id(),
            Self::DescribeSlackWorkspacesException(e) => e.request_id(),
            Self::GetAccountPreferencesException(e) => e.request_id(),
            Self::GetTeamsChannelConfigurationException(e) => e.request_id(),
            Self::InvalidParameterException(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ListMicrosoftTeamsConfiguredTeamsException(e) => e.request_id(),
            Self::ListMicrosoftTeamsUserIdentitiesException(e) => e.request_id(),
            Self::ListTeamsChannelConfigurationsException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::UpdateAccountPreferencesException(e) => e.request_id(),
            Self::UpdateChimeWebhookConfigurationException(e) => e.request_id(),
            Self::UpdateSlackChannelConfigurationException(e) => e.request_id(),
            Self::UpdateTeamsChannelConfigurationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}

