// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateChimeWebhookConfigurationInput  {
    /// Description of the webhook. Recommend using the convention `RoomName/WebhookName`. See Chime setup tutorial for more details: https://docs.aws.amazon.com/chatbot/latest/adminguide/chime-setup.html.
    pub webhook_description: ::std::option::Option<::std::string::String>,
    /// URL for the Chime webhook.
    pub webhook_url: ::std::option::Option<::std::string::String>,
    /// The ARNs of the SNS topics that deliver notifications to AWS Chatbot.
    pub sns_topic_arns: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
    /// This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role. For more information, see IAM Policies for AWS Chatbot.
    pub iam_role_arn: ::std::option::Option<::std::string::String>,
    /// The name of the configuration.
    pub configuration_name: ::std::option::Option<::std::string::String>,
    /// Logging levels include ERROR, INFO, or NONE.
    pub logging_level: ::std::option::Option<::std::string::String>,
}
impl  CreateChimeWebhookConfigurationInput  {
    /// Description of the webhook. Recommend using the convention `RoomName/WebhookName`. See Chime setup tutorial for more details: https://docs.aws.amazon.com/chatbot/latest/adminguide/chime-setup.html.
    pub fn webhook_description(&self) -> ::std::option::Option<& str> {
        self.webhook_description.as_deref()
    }
    /// URL for the Chime webhook.
    pub fn webhook_url(&self) -> ::std::option::Option<& str> {
        self.webhook_url.as_deref()
    }
    /// The ARNs of the SNS topics that deliver notifications to AWS Chatbot.
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sns_topic_arns.is_none()`.
    pub fn sns_topic_arns(&self) -> & [::std::string::String] {
        self.sns_topic_arns.as_deref()
        .unwrap_or_default()
    }
    /// This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role. For more information, see IAM Policies for AWS Chatbot.
    pub fn iam_role_arn(&self) -> ::std::option::Option<& str> {
        self.iam_role_arn.as_deref()
    }
    /// The name of the configuration.
    pub fn configuration_name(&self) -> ::std::option::Option<& str> {
        self.configuration_name.as_deref()
    }
    /// Logging levels include ERROR, INFO, or NONE.
    pub fn logging_level(&self) -> ::std::option::Option<& str> {
        self.logging_level.as_deref()
    }
}
impl CreateChimeWebhookConfigurationInput {
    /// Creates a new builder-style object to manufacture [`CreateChimeWebhookConfigurationInput`](crate::operation::create_chime_webhook_configuration::CreateChimeWebhookConfigurationInput).
    pub fn builder() -> crate::operation::create_chime_webhook_configuration::builders::CreateChimeWebhookConfigurationInputBuilder {
        crate::operation::create_chime_webhook_configuration::builders::CreateChimeWebhookConfigurationInputBuilder::default()
    }
}

/// A builder for [`CreateChimeWebhookConfigurationInput`](crate::operation::create_chime_webhook_configuration::CreateChimeWebhookConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateChimeWebhookConfigurationInputBuilder {
    pub(crate) webhook_description: ::std::option::Option<::std::string::String>,
    pub(crate) webhook_url: ::std::option::Option<::std::string::String>,
    pub(crate) sns_topic_arns: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
    pub(crate) iam_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) configuration_name: ::std::option::Option<::std::string::String>,
    pub(crate) logging_level: ::std::option::Option<::std::string::String>,
}
impl CreateChimeWebhookConfigurationInputBuilder {
    /// Description of the webhook. Recommend using the convention `RoomName/WebhookName`. See Chime setup tutorial for more details: https://docs.aws.amazon.com/chatbot/latest/adminguide/chime-setup.html.
    /// This field is required.
    pub fn webhook_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.webhook_description = ::std::option::Option::Some(input.into());
        self
    }
    /// Description of the webhook. Recommend using the convention `RoomName/WebhookName`. See Chime setup tutorial for more details: https://docs.aws.amazon.com/chatbot/latest/adminguide/chime-setup.html.
    pub fn set_webhook_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.webhook_description = input; self
    }
    /// Description of the webhook. Recommend using the convention `RoomName/WebhookName`. See Chime setup tutorial for more details: https://docs.aws.amazon.com/chatbot/latest/adminguide/chime-setup.html.
    pub fn get_webhook_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.webhook_description
    }
    /// URL for the Chime webhook.
    /// This field is required.
    pub fn webhook_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.webhook_url = ::std::option::Option::Some(input.into());
        self
    }
    /// URL for the Chime webhook.
    pub fn set_webhook_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.webhook_url = input; self
    }
    /// URL for the Chime webhook.
    pub fn get_webhook_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.webhook_url
    }
    /// Appends an item to `sns_topic_arns`.
    ///
    /// To override the contents of this collection use [`set_sns_topic_arns`](Self::set_sns_topic_arns).
    ///
    /// The ARNs of the SNS topics that deliver notifications to AWS Chatbot.
    pub fn sns_topic_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.sns_topic_arns.unwrap_or_default();
                        v.push(input.into());
                        self.sns_topic_arns = ::std::option::Option::Some(v);
                        self
    }
    /// The ARNs of the SNS topics that deliver notifications to AWS Chatbot.
    pub fn set_sns_topic_arns(mut self, input: ::std::option::Option<::std::vec::Vec::<::std::string::String>>) -> Self {
        self.sns_topic_arns = input; self
    }
    /// The ARNs of the SNS topics that deliver notifications to AWS Chatbot.
    pub fn get_sns_topic_arns(&self) -> &::std::option::Option<::std::vec::Vec::<::std::string::String>> {
        &self.sns_topic_arns
    }
    /// This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role. For more information, see IAM Policies for AWS Chatbot.
    /// This field is required.
    pub fn iam_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role. For more information, see IAM Policies for AWS Chatbot.
    pub fn set_iam_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_role_arn = input; self
    }
    /// This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role. For more information, see IAM Policies for AWS Chatbot.
    pub fn get_iam_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_role_arn
    }
    /// The name of the configuration.
    /// This field is required.
    pub fn configuration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configuration_name = ::std::option::Option::Some(input.into());
        self
    }
    /// The name of the configuration.
    pub fn set_configuration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configuration_name = input; self
    }
    /// The name of the configuration.
    pub fn get_configuration_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.configuration_name
    }
    /// Logging levels include ERROR, INFO, or NONE.
    pub fn logging_level(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.logging_level = ::std::option::Option::Some(input.into());
        self
    }
    /// Logging levels include ERROR, INFO, or NONE.
    pub fn set_logging_level(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.logging_level = input; self
    }
    /// Logging levels include ERROR, INFO, or NONE.
    pub fn get_logging_level(&self) -> &::std::option::Option<::std::string::String> {
        &self.logging_level
    }
    /// Consumes the builder and constructs a [`CreateChimeWebhookConfigurationInput`](crate::operation::create_chime_webhook_configuration::CreateChimeWebhookConfigurationInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_chime_webhook_configuration::CreateChimeWebhookConfigurationInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::create_chime_webhook_configuration::CreateChimeWebhookConfigurationInput {
                webhook_description: self.webhook_description
                ,
                webhook_url: self.webhook_url
                ,
                sns_topic_arns: self.sns_topic_arns
                ,
                iam_role_arn: self.iam_role_arn
                ,
                configuration_name: self.configuration_name
                ,
                logging_level: self.logging_level
                ,
            }
        )
    }
}

