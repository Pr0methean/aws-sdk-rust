// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Identifes a User level permission for a channel configuration.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SlackUserIdentity  {
    /// The ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role. For more information, see IAM Policies for AWS Chatbot.
    pub iam_role_arn: ::std::string::String,
    /// The ARN of the SlackChannelConfiguration associated with the user identity.
    pub chat_configuration_arn: ::std::string::String,
    /// The ID of the Slack workspace authorized with AWS Chatbot.
    pub slack_team_id: ::std::string::String,
    /// The ID of the user in Slack.
    pub slack_user_id: ::std::string::String,
    /// The AWS user identity ARN used to associate a Slack User Identity with an IAM Role.
    pub aws_user_identity: ::std::option::Option<::std::string::String>,
}
impl  SlackUserIdentity  {
    /// The ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role. For more information, see IAM Policies for AWS Chatbot.
    pub fn iam_role_arn(&self) -> & str {
        use std::ops::Deref; self.iam_role_arn.deref()
    }
    /// The ARN of the SlackChannelConfiguration associated with the user identity.
    pub fn chat_configuration_arn(&self) -> & str {
        use std::ops::Deref; self.chat_configuration_arn.deref()
    }
    /// The ID of the Slack workspace authorized with AWS Chatbot.
    pub fn slack_team_id(&self) -> & str {
        use std::ops::Deref; self.slack_team_id.deref()
    }
    /// The ID of the user in Slack.
    pub fn slack_user_id(&self) -> & str {
        use std::ops::Deref; self.slack_user_id.deref()
    }
    /// The AWS user identity ARN used to associate a Slack User Identity with an IAM Role.
    pub fn aws_user_identity(&self) -> ::std::option::Option<& str> {
        self.aws_user_identity.as_deref()
    }
}
impl SlackUserIdentity {
    /// Creates a new builder-style object to manufacture [`SlackUserIdentity`](crate::types::SlackUserIdentity).
    pub fn builder() -> crate::types::builders::SlackUserIdentityBuilder {
        crate::types::builders::SlackUserIdentityBuilder::default()
    }
}

/// A builder for [`SlackUserIdentity`](crate::types::SlackUserIdentity).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SlackUserIdentityBuilder {
    pub(crate) iam_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) chat_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) slack_team_id: ::std::option::Option<::std::string::String>,
    pub(crate) slack_user_id: ::std::option::Option<::std::string::String>,
    pub(crate) aws_user_identity: ::std::option::Option<::std::string::String>,
}
impl SlackUserIdentityBuilder {
    /// The ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role. For more information, see IAM Policies for AWS Chatbot.
    /// This field is required.
    pub fn iam_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role. For more information, see IAM Policies for AWS Chatbot.
    pub fn set_iam_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_role_arn = input; self
    }
    /// The ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role. For more information, see IAM Policies for AWS Chatbot.
    pub fn get_iam_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_role_arn
    }
    /// The ARN of the SlackChannelConfiguration associated with the user identity.
    /// This field is required.
    pub fn chat_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.chat_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The ARN of the SlackChannelConfiguration associated with the user identity.
    pub fn set_chat_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.chat_configuration_arn = input; self
    }
    /// The ARN of the SlackChannelConfiguration associated with the user identity.
    pub fn get_chat_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.chat_configuration_arn
    }
    /// The ID of the Slack workspace authorized with AWS Chatbot.
    /// This field is required.
    pub fn slack_team_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slack_team_id = ::std::option::Option::Some(input.into());
        self
    }
    /// The ID of the Slack workspace authorized with AWS Chatbot.
    pub fn set_slack_team_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slack_team_id = input; self
    }
    /// The ID of the Slack workspace authorized with AWS Chatbot.
    pub fn get_slack_team_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.slack_team_id
    }
    /// The ID of the user in Slack.
    /// This field is required.
    pub fn slack_user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slack_user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// The ID of the user in Slack.
    pub fn set_slack_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slack_user_id = input; self
    }
    /// The ID of the user in Slack.
    pub fn get_slack_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.slack_user_id
    }
    /// The AWS user identity ARN used to associate a Slack User Identity with an IAM Role.
    pub fn aws_user_identity(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_user_identity = ::std::option::Option::Some(input.into());
        self
    }
    /// The AWS user identity ARN used to associate a Slack User Identity with an IAM Role.
    pub fn set_aws_user_identity(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_user_identity = input; self
    }
    /// The AWS user identity ARN used to associate a Slack User Identity with an IAM Role.
    pub fn get_aws_user_identity(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_user_identity
    }
    /// Consumes the builder and constructs a [`SlackUserIdentity`](crate::types::SlackUserIdentity).
    /// This method will fail if any of the following fields are not set:
    /// - [`iam_role_arn`](crate::types::builders::SlackUserIdentityBuilder::iam_role_arn)
    /// - [`chat_configuration_arn`](crate::types::builders::SlackUserIdentityBuilder::chat_configuration_arn)
    /// - [`slack_team_id`](crate::types::builders::SlackUserIdentityBuilder::slack_team_id)
    /// - [`slack_user_id`](crate::types::builders::SlackUserIdentityBuilder::slack_user_id)
    pub fn build(self) -> ::std::result::Result<crate::types::SlackUserIdentity, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::types::SlackUserIdentity {
                iam_role_arn: self.iam_role_arn
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("iam_role_arn", "iam_role_arn was not specified but it is required when building SlackUserIdentity")
                    )?
                ,
                chat_configuration_arn: self.chat_configuration_arn
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("chat_configuration_arn", "chat_configuration_arn was not specified but it is required when building SlackUserIdentity")
                    )?
                ,
                slack_team_id: self.slack_team_id
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("slack_team_id", "slack_team_id was not specified but it is required when building SlackUserIdentity")
                    )?
                ,
                slack_user_id: self.slack_user_id
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("slack_user_id", "slack_user_id was not specified but it is required when building SlackUserIdentity")
                    )?
                ,
                aws_user_identity: self.aws_user_identity
                ,
            }
        )
    }
}

