// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_control_plane_user_attribute_filter(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ControlPlaneUserAttributeFilter,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.or_conditions {
        let mut array_2 = object.key("OrConditions").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_attribute_and_condition::ser_attribute_and_condition(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.and_condition {
        #[allow(unused_mut)]
        let mut object_6 = object.key("AndCondition").start_object();
        crate::protocol_serde::shape_attribute_and_condition::ser_attribute_and_condition(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.tag_condition {
        #[allow(unused_mut)]
        let mut object_8 = object.key("TagCondition").start_object();
        crate::protocol_serde::shape_tag_condition::ser_tag_condition(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.hierarchy_group_condition {
        #[allow(unused_mut)]
        let mut object_10 = object.key("HierarchyGroupCondition").start_object();
        crate::protocol_serde::shape_hierarchy_group_condition::ser_hierarchy_group_condition(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}
