// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_job_flow_instances_config(
                         object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
                         input: &crate::types::JobFlowInstancesConfig,
                    ) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.master_instance_type {
        object.key("MasterInstanceType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.slave_instance_type {
        object.key("SlaveInstanceType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.instance_count {
        object.key("InstanceCount").number(#[allow(clippy::useless_conversion)]::aws_smithy_types::Number::NegInt((*var_3).into()));
    }
    if let Some(var_4) = &input.instance_groups {
        let mut array_5 = object.key("InstanceGroups").start_array();
        for item_6 in var_4 {
             {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_instance_group_config::ser_instance_group_config(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.instance_fleets {
        let mut array_9 = object.key("InstanceFleets").start_array();
        for item_10 in var_8 {
             {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_instance_fleet_config::ser_instance_fleet_config(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.ec2_key_name {
        object.key("Ec2KeyName").string(var_12.as_str());
    }
    if let Some(var_13) = &input.placement {
        #[allow(unused_mut)]
        let mut object_14 = object.key("Placement").start_object();
        crate::protocol_serde::shape_placement_type::ser_placement_type(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.keep_job_flow_alive_when_no_steps {
        object.key("KeepJobFlowAliveWhenNoSteps").boolean(*var_15);
    }
    if let Some(var_16) = &input.termination_protected {
        object.key("TerminationProtected").boolean(*var_16);
    }
    if let Some(var_17) = &input.unhealthy_node_replacement {
        object.key("UnhealthyNodeReplacement").boolean(*var_17);
    }
    if let Some(var_18) = &input.hadoop_version {
        object.key("HadoopVersion").string(var_18.as_str());
    }
    if let Some(var_19) = &input.ec2_subnet_id {
        object.key("Ec2SubnetId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.ec2_subnet_ids {
        let mut array_21 = object.key("Ec2SubnetIds").start_array();
        for item_22 in var_20 {
             {
                array_21.value().string(item_22.as_str());
            }
        }
        array_21.finish();
    }
    if let Some(var_23) = &input.emr_managed_master_security_group {
        object.key("EmrManagedMasterSecurityGroup").string(var_23.as_str());
    }
    if let Some(var_24) = &input.emr_managed_slave_security_group {
        object.key("EmrManagedSlaveSecurityGroup").string(var_24.as_str());
    }
    if let Some(var_25) = &input.service_access_security_group {
        object.key("ServiceAccessSecurityGroup").string(var_25.as_str());
    }
    if let Some(var_26) = &input.additional_master_security_groups {
        let mut array_27 = object.key("AdditionalMasterSecurityGroups").start_array();
        for item_28 in var_26 {
             {
                array_27.value().string(item_28.as_str());
            }
        }
        array_27.finish();
    }
    if let Some(var_29) = &input.additional_slave_security_groups {
        let mut array_30 = object.key("AdditionalSlaveSecurityGroups").start_array();
        for item_31 in var_29 {
             {
                array_30.value().string(item_31.as_str());
            }
        }
        array_30.finish();
    }
    Ok(())
}

