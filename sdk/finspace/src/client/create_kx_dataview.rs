// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateKxDataview`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder) operation.
                            ///
                            /// - The fluent builder is configurable:
    ///   - [`environment_id(impl Into<String>)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::environment_id) / [`set_environment_id(Option<String>)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::set_environment_id):<br>required: **true**<br><p>A unique identifier for the kdb environment, where you want to create the dataview.</p><br>
    ///   - [`database_name(impl Into<String>)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::database_name) / [`set_database_name(Option<String>)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::set_database_name):<br>required: **true**<br><p>The name of the database where you want to create a dataview.</p><br>
    ///   - [`dataview_name(impl Into<String>)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::dataview_name) / [`set_dataview_name(Option<String>)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::set_dataview_name):<br>required: **true**<br><p>A unique identifier for the dataview.</p><br>
    ///   - [`az_mode(KxAzMode)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::az_mode) / [`set_az_mode(Option<KxAzMode>)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::set_az_mode):<br>required: **true**<br><p>The number of availability zones you want to assign per volume. Currently, FinSpace only supports <code>SINGLE</code> for volumes. This places dataview in a single AZ.</p><br>
    ///   - [`availability_zone_id(impl Into<String>)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::availability_zone_id) / [`set_availability_zone_id(Option<String>)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::set_availability_zone_id):<br>required: **false**<br><p>The identifier of the availability zones.</p><br>
    ///   - [`changeset_id(impl Into<String>)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::changeset_id) / [`set_changeset_id(Option<String>)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::set_changeset_id):<br>required: **false**<br><p>A unique identifier of the changeset that you want to use to ingest data.</p><br>
    ///   - [`segment_configurations(KxDataviewSegmentConfiguration)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::segment_configurations) / [`set_segment_configurations(Option<Vec::<KxDataviewSegmentConfiguration>>)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::set_segment_configurations):<br>required: **false**<br><p>The configuration that contains the database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume. If you do not explicitly specify any database path for a volume, they are accessible from the cluster through the default S3/object store segment.</p><br>
    ///   - [`auto_update(bool)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::auto_update) / [`set_auto_update(Option<bool>)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::set_auto_update):<br>required: **false**<br><p>The option to specify whether you want to apply all the future additions and corrections automatically to the dataview, when you ingest new changesets. The default value is false.</p><br>
    ///   - [`read_write(bool)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::read_write) / [`set_read_write(Option<bool>)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::set_read_write):<br>required: **false**<br><p>The option to specify whether you want to make the dataview writable to perform database maintenance. The following are some considerations related to writable dataviews.  </p> <ul>  <li>   <p>You cannot create partial writable dataviews. When you create writeable dataviews you must provide the entire database path.</p></li>  <li>   <p>You cannot perform updates on a writeable dataview. Hence, <code>autoUpdate</code> must be set as <b>False</b> if <code>readWrite</code> is <b>True</b> for a dataview.</p></li>  <li>   <p>You must also use a unique volume for creating a writeable dataview. So, if you choose a volume that is already in use by another dataview, the dataview creation fails.</p></li>  <li>   <p>Once you create a dataview as writeable, you cannot change it to read-only. So, you cannot update the <code>readWrite</code> parameter later.</p></li> </ul><br>
    ///   - [`description(impl Into<String>)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::set_description):<br>required: **false**<br><p>A description of the dataview.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::set_tags):<br>required: **false**<br><p>A list of key-value pairs to label the dataview. You can add up to 50 tags to a dataview.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::set_client_token):<br>required: **true**<br><p>A token that ensures idempotency. This token expires in 10 minutes.</p><br>
                            /// - On success, responds with [`CreateKxDataviewOutput`](crate::operation::create_kx_dataview::CreateKxDataviewOutput) with field(s):
    ///   - [`dataview_name(Option<String>)`](crate::operation::create_kx_dataview::CreateKxDataviewOutput::dataview_name): <p>A unique identifier for the dataview.</p>
    ///   - [`database_name(Option<String>)`](crate::operation::create_kx_dataview::CreateKxDataviewOutput::database_name): <p>The name of the database where you want to create a dataview.</p>
    ///   - [`environment_id(Option<String>)`](crate::operation::create_kx_dataview::CreateKxDataviewOutput::environment_id): <p>A unique identifier for the kdb environment, where you want to create the dataview.</p>
    ///   - [`az_mode(Option<KxAzMode>)`](crate::operation::create_kx_dataview::CreateKxDataviewOutput::az_mode): <p>The number of availability zones you want to assign per volume. Currently, FinSpace only supports <code>SINGLE</code> for volumes. This places dataview in a single AZ.</p>
    ///   - [`availability_zone_id(Option<String>)`](crate::operation::create_kx_dataview::CreateKxDataviewOutput::availability_zone_id): <p>The identifier of the availability zones.</p>
    ///   - [`changeset_id(Option<String>)`](crate::operation::create_kx_dataview::CreateKxDataviewOutput::changeset_id): <p>A unique identifier for the changeset.</p>
    ///   - [`segment_configurations(Option<Vec::<KxDataviewSegmentConfiguration>>)`](crate::operation::create_kx_dataview::CreateKxDataviewOutput::segment_configurations): <p>The configuration that contains the database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume. If you do not explicitly specify any database path for a volume, they are accessible from the cluster through the default S3/object store segment.</p>
    ///   - [`description(Option<String>)`](crate::operation::create_kx_dataview::CreateKxDataviewOutput::description): <p>A description of the dataview.</p>
    ///   - [`auto_update(bool)`](crate::operation::create_kx_dataview::CreateKxDataviewOutput::auto_update): <p>The option to select whether you want to apply all the future additions and corrections automatically to the dataview when you ingest new changesets. The default value is false.</p>
    ///   - [`read_write(bool)`](crate::operation::create_kx_dataview::CreateKxDataviewOutput::read_write): <p>Returns True if the dataview is created as writeable and False otherwise.</p>
    ///   - [`created_timestamp(Option<DateTime>)`](crate::operation::create_kx_dataview::CreateKxDataviewOutput::created_timestamp): <p>The timestamp at which the dataview was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    ///   - [`last_modified_timestamp(Option<DateTime>)`](crate::operation::create_kx_dataview::CreateKxDataviewOutput::last_modified_timestamp): <p>The last time that the dataview was updated in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    ///   - [`status(Option<KxDataviewStatus>)`](crate::operation::create_kx_dataview::CreateKxDataviewOutput::status): <p>The status of dataview creation.</p> <ul>  <li>   <p><code>CREATING</code> – The dataview creation is in progress.</p></li>  <li>   <p><code>UPDATING</code> – The dataview is in the process of being updated.</p></li>  <li>   <p><code>ACTIVE</code> – The dataview is active.</p></li> </ul>
                            /// - On failure, responds with [`SdkError<CreateKxDataviewError>`](crate::operation::create_kx_dataview::CreateKxDataviewError)
    pub fn create_kx_dataview(&self) -> crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder {
                                crate::operation::create_kx_dataview::builders::CreateKxDataviewFluentBuilder::new(self.handle.clone())
                            }
}

