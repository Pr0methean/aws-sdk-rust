// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_program_input_input(
                         object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
                         input: &crate::operation::create_program::CreateProgramInput,
                    ) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.ad_breaks {
        let mut array_2 = object.key("AdBreaks").start_array();
        for item_3 in var_1 {
             {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_ad_break::ser_ad_break(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.audience_media {
        let mut array_6 = object.key("AudienceMedia").start_array();
        for item_7 in var_5 {
             {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_audience_media::ser_audience_media(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.live_source_name {
        object.key("LiveSourceName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.schedule_configuration {
        #[allow(unused_mut)]
        let mut object_11 = object.key("ScheduleConfiguration").start_object();
        crate::protocol_serde::shape_schedule_configuration::ser_schedule_configuration(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.source_location_name {
        object.key("SourceLocationName").string(var_12.as_str());
    }
    if let Some(var_13) = &input.vod_source_name {
        object.key("VodSourceName").string(var_13.as_str());
    }
    Ok(())
}

